{
  "address": "0xF76e67f8b90AC7B0D03BeA04fF9429D7016BE936",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_liAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vgAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_machineAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "CartesiComputeCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_state",
          "type": "bytes32"
        }
      ],
      "name": "CartesiComputeFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "ChallengeStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_claimedFinalHash",
          "type": "bytes32"
        }
      ],
      "name": "ClaimSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_confirmParty",
          "type": "address"
        }
      ],
      "name": "Confirmed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "position",
              "type": "uint64"
            },
            {
              "internalType": "uint8",
              "name": "driveLog2Size",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "directValue",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "loggerIpfsPath",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "loggerRootHash",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "provider",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "waitsProvider",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "needsLogger",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "downloadAsCAR",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct CartesiComputeInterface.Drive",
          "name": "_drive",
          "type": "tuple"
        }
      ],
      "name": "DriveInserted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "abortByDeadline",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "challenge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "challengeDrives",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "confirm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "destruct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getCurrentState",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "currentNonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_p",
          "type": "address"
        }
      ],
      "name": "getPartyState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isParty",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "hasVoted",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "hasCheated",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getResult",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getState",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "position",
              "type": "uint64"
            },
            {
              "internalType": "uint8",
              "name": "driveLog2Size",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "directValue",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "loggerIpfsPath",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "loggerRootHash",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "provider",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "waitsProvider",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "needsLogger",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "downloadAsCAR",
              "type": "bool"
            }
          ],
          "internalType": "struct CartesiComputeInterface.Drive[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isParty",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasVoted",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasCheated",
              "type": "bool"
            },
            {
              "internalType": "uint64",
              "name": "arrayIdx",
              "type": "uint64"
            }
          ],
          "internalType": "struct CartesiComputeInterface.Party",
          "name": "user",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "noChallengeDrive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getSubInstances",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_indices",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_finalTime",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_templateHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_outputPosition",
          "type": "uint64"
        },
        {
          "internalType": "uint8",
          "name": "_outputLog2Size",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_roundDuration",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "parties",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "position",
              "type": "uint64"
            },
            {
              "internalType": "uint8",
              "name": "driveLog2Size",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "directValue",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "loggerIpfsPath",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "loggerRootHash",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "provider",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "waitsProvider",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "needsLogger",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "downloadAsCAR",
              "type": "bool"
            }
          ],
          "internalType": "struct CartesiComputeInterface.Drive[]",
          "name": "_inputDrives",
          "type": "tuple[]"
        },
        {
          "internalType": "bool",
          "name": "_noChallengeDrive",
          "type": "bool"
        }
      ],
      "name": "instantiate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "isConcerned",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_value",
          "type": "bytes"
        }
      ],
      "name": "provideDirectDrive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "provideLoggerDrive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "revealLoggerDrive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_claimedFinalHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[][]",
          "name": "_drivesSiblings",
          "type": "bytes32[][]"
        },
        {
          "internalType": "bytes",
          "name": "_output",
          "type": "bytes"
        },
        {
          "internalType": "bytes32[]",
          "name": "_outputSiblings",
          "type": "bytes32[]"
        }
      ],
      "name": "submitClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "winByVG",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0031fba6ba60b20eb500be5b35e511e4f37862e30ba8e6a6754211cc7ddbbb7f",
  "receipt": {
    "to": null,
    "from": "0x18930e8a66a1DbE21D00581216789AAB7460Afd0",
    "contractAddress": "0xF76e67f8b90AC7B0D03BeA04fF9429D7016BE936",
    "transactionIndex": 2,
    "gasUsed": "5410666",
    "logsBloom": "0x
    "blockHash": "0x8c4085d116c643fa026a0def7e1560d72e8f50b303bfc339f8d1ddc9a18795bb",
    "transactionHash": "0x0031fba6ba60b20eb500be5b35e511e4f37862e30ba8e6a6754211cc7ddbbb7f",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 33469981,
        "transactionHash": "0x0031fba6ba60b20eb500be5b35e511e4f37862e30ba8e6a6754211cc7ddbbb7f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000018930e8a66a1dbe21d00581216789aab7460afd0",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000022a9b1e5c8091600000000000000000000000000000000000000000000000004706c8566fd1b0f000000000000000000000000000000000000000000001cbbd287a448c5e0f1ec000000000000000000000000000000000000000000000000044dc2d3813511f9000000000000000000000000000000000000000000001cbbd2aa4dfaaba8fb02",
        "logIndex": 4,
        "blockHash": "0x8c4085d116c643fa026a0def7e1560d72e8f50b303bfc339f8d1ddc9a18795bb"
      }
    ],
    "blockNumber": 33469981,
    "cumulativeGasUsed": "5473294",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBf108162392b4cc6bb35b6E197b0F686A6078172",
    "0xf5a10C0b46eAD9d0B1630DFfC9934b9bbef9A577",
    "0xC474d6dE15875D48e7A7E4d109006ABaDBa416C4"
  ],
  "solcInputHash": "1d610f5e17d402b5b095c2bb5fce1e6c",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vgAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_machineAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"CartesiComputeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_state\",\"type\":\"bytes32\"}],\"name\":\"CartesiComputeFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"ChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_claimedFinalHash\",\"type\":\"bytes32\"}],\"name\":\"ClaimSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_confirmParty\",\"type\":\"address\"}],\"name\":\"Confirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"position\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"driveLog2Size\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"directValue\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"loggerIpfsPath\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"loggerRootHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"waitsProvider\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"needsLogger\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"downloadAsCAR\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct CartesiComputeInterface.Drive\",\"name\":\"_drive\",\"type\":\"tuple\"}],\"name\":\"DriveInserted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"abortByDeadline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"challenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"challengeDrives\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"confirm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"destruct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getCurrentState\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_p\",\"type\":\"address\"}],\"name\":\"getPartyState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isParty\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasCheated\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getResult\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"position\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"driveLog2Size\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"directValue\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"loggerIpfsPath\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"loggerRootHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"waitsProvider\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"needsLogger\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"downloadAsCAR\",\"type\":\"bool\"}],\"internalType\":\"struct CartesiComputeInterface.Drive[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isParty\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasCheated\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"arrayIdx\",\"type\":\"uint64\"}],\"internalType\":\"struct CartesiComputeInterface.Party\",\"name\":\"user\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"noChallengeDrive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getSubInstances\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_indices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_finalTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_templateHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_outputPosition\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"_outputLog2Size\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_roundDuration\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"parties\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"position\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"driveLog2Size\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"directValue\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"loggerIpfsPath\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"loggerRootHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"waitsProvider\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"needsLogger\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"downloadAsCAR\",\"type\":\"bool\"}],\"internalType\":\"struct CartesiComputeInterface.Drive[]\",\"name\":\"_inputDrives\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"_noChallengeDrive\",\"type\":\"bool\"}],\"name\":\"instantiate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isConcerned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_value\",\"type\":\"bytes\"}],\"name\":\"provideDirectDrive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"provideLoggerDrive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"revealLoggerDrive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_claimedFinalHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[][]\",\"name\":\"_drivesSiblings\",\"type\":\"bytes32[][]\"},{\"internalType\":\"bytes\",\"name\":\"_output\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"_outputSiblings\",\"type\":\"bytes32[]\"}],\"name\":\"submitClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"winByVG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"abortByDeadline(uint256)\":{\"params\":{\"_index\":\"index of Cartesi Compute instance to abort\"}},\"challenge(uint256)\":{\"params\":{\"_index\":\"index of Cartesi Compute instance which challenger is starting the VG.\"}},\"challengeDrives(uint256)\":{\"params\":{\"_index\":\"index of Cartesi Compute instance which is requested for the drives\"}},\"confirm(uint256)\":{\"params\":{\"_index\":\"index of Cartesi Compute instance which claimer being confirmed\"}},\"destruct(uint256)\":{\"params\":{\"_index\":\"index of Cartesi Compute instance to deactivate\"}},\"getResult(uint256)\":{\"params\":{\"_index\":\"index of Cartesi Compute instance to get result\"},\"returns\":{\"_0\":\"bool, indicates the result is ready\",\"_1\":\"bool, indicates the sdk is still running\",\"_2\":\"address, the user to blame for the abnormal stop of the sdk\",\"_3\":\"bytes, the result of the sdk if available\"}},\"instantiate(uint256,bytes32,uint64,uint8,uint256,address[],(uint64,uint8,bytes,bytes,bytes32,address,bool,bool,bool)[],bool)\":{\"params\":{\"_finalTime\":\"max cycle of the machine for that computation\",\"_inputDrives\":\"an array of drive which assemble the machine\",\"_noChallengeDrive\":\"bool indicating if content is challengeable\",\"_outputPosition\":\"position of the output drive\",\"_roundDuration\":\"duration of the round (security param)\",\"_templateHash\":\"hash of the machine with all drives empty\"},\"returns\":{\"_0\":\"uint256, Cartesi Compute index\"}},\"provideDirectDrive(uint256,bytes)\":{\"params\":{\"_index\":\"index of Cartesi Compute instance the drive belongs to.\",\"_value\":\"bytes value of the direct drive\"}},\"provideLoggerDrive(uint256,bytes32)\":{\"params\":{\"_index\":\"index of CartesiCompute instance the drive belongs to\",\"_root\":\"root hash of the logger drive\"}},\"revealLoggerDrive(uint256)\":{\"params\":{\"_index\":\"index of Cartesi Compute instance the drive belongs to\"}},\"submitClaim(uint256,bytes32,bytes32[][],bytes,bytes32[])\":{\"details\":\"Example: consider 3 drives, the first drive's siblings should be a pristine machine.      The second drive's siblings should be the machine with drive 1 mounted.      The third drive's siblings should be the machine with drive 2 mounted.\",\"params\":{\"_claimedFinalHash\":\"is the final hash of the machine\",\"_drivesSiblings\":\"is an array of siblings of each drive (see below example)\",\"_output\":\"is the bytes32 value of the output position\",\"_outputSiblings\":\"is the siblings of the output drive\"}},\"winByVG(uint256)\":{\"params\":{\"_index\":\"index of Cartesi Compute instance to win\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"abortByDeadline(uint256)\":{\"notice\":\"Abort the instance by missing deadline.\"},\"challenge(uint256)\":{\"notice\":\"Challenger disputes the claim, starting a verification game.\"},\"challengeDrives(uint256)\":{\"notice\":\"User requesting content of all drives to be revealed.\"},\"confirm(uint256)\":{\"notice\":\"Party confirms the claim\"},\"destruct(uint256)\":{\"notice\":\"Deactivate a Cartesi Compute SDK instance.\"},\"getResult(uint256)\":{\"notice\":\"Get result of a finished instance.\"},\"getState(uint256,address)\":{\"notice\":\"Get state of the instance concerning given user.\"},\"getSubInstances(uint256,address)\":{\"notice\":\"Get sub-instances of the instance.\"},\"instantiate(uint256,bytes32,uint64,uint8,uint256,address[],(uint64,uint8,bytes,bytes,bytes32,address,bool,bool,bool)[],bool)\":{\"notice\":\"Instantiate a Cartesi Compute SDK instance.\"},\"isConcerned(uint256,address)\":{\"notice\":\"Is the given user concern about this instance.\"},\"provideDirectDrive(uint256,bytes)\":{\"notice\":\"Provide the content of a direct drive (only drive provider can call it).\"},\"provideLoggerDrive(uint256,bytes32)\":{\"notice\":\"Provide the root hash of a logger drive (only drive provider can call it).\"},\"revealLoggerDrive(uint256)\":{\"notice\":\"Reveal the content of a logger drive (only drive provider can call it).\"},\"submitClaim(uint256,bytes32,bytes32[][],bytes,bytes32[])\":{\"notice\":\"Claimer claims the machine final hash and also validate the drives and initial hash of the machine.\"},\"winByVG(uint256)\":{\"notice\":\"In case one of the parties wins the verification game,         then he or she can call this function to claim victory in         this contract as well.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"cache/solpp-generated-contracts/CartesiCompute.sol\":\"CartesiCompute\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":110},\"remappings\":[]},\"sources\":{\"@cartesi/arbitration/contracts/MMInterface.sol\":{\"content\":\"// Copyright (C) 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n// This program is free software: you can redistribute it and/or modify it under\\n// the terms of the GNU General Public License as published by the Free Software\\n// Foundation, either version 3 of the License, or (at your option) any later\\n// version.\\n\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY\\n// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\\n// PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\n// Note: This component currently has dependencies that are licensed under the GNU\\n// GPL, version 3, and so you should treat this component as a whole as being under\\n// the GPL version 3. But all Cartesi-written code in this component is licensed\\n// under the Apache License, version 2, or a compatible permissive license, and can\\n// be used independently under the Apache v2 license. After this component is\\n// rewritten, the entire component will be released under the Apache v2 license.\\n\\n/// @title Interface for memory manager instantiator\\npragma solidity ^0.7.0;\\n\\nimport \\\"@cartesi/util/contracts/Instantiator.sol\\\";\\n\\ninterface MMInterface is Instantiator {\\n    enum state {WaitingProofs, WaitingReplay, FinishedReplay}\\n\\n    function getCurrentState(uint256 _index) external view returns (bytes32);\\n\\n    function instantiate(\\n        address _owner,\\n        address _provider,\\n        bytes32 _initialHash\\n    ) external returns (uint256);\\n\\n    function newHash(uint256 _index) external view returns (bytes32);\\n\\n    function finishProofPhase(uint256 _index) external;\\n\\n    function finishReplayPhase(uint256 _index) external;\\n\\n    function getRWArrays(\\n        uint256 _index\\n    )\\n    external\\n    view\\n    returns (\\n        uint64[] memory,\\n        bytes8[] memory,\\n        bool[] memory\\n    );\\n\\n    function stateIsWaitingProofs(uint256 _index) external view returns (bool);\\n\\n    function stateIsWaitingReplay(uint256 _index) external view returns (bool);\\n\\n    function stateIsFinishedReplay(uint256 _index) external view returns (bool);\\n\\n    function getCurrentStateDeadline(\\n        uint256 _index,\\n        uint256 _roundDuration,\\n        uint256 _timeToStartMachine\\n    ) external view returns (uint256);\\n\\n    function getMaxInstanceDuration(\\n        uint256 _roundDuration,\\n        uint256 _timeToStartMachine\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc35a3addeda42b399d8995c1d3e8ea16746d1d95bb5214cd9709201bc9d702c0\",\"license\":\"GPL-3.0-only\"},\"@cartesi/arbitration/contracts/MachineInterface.sol\":{\"content\":\"// Copyright (C) 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n// This program is free software: you can redistribute it and/or modify it under\\n// the terms of the GNU General Public License as published by the Free Software\\n// Foundation, either version 3 of the License, or (at your option) any later\\n// version.\\n\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY\\n// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\\n// PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\n// Note: This component currently has dependencies that are licensed under the GNU\\n// GPL, version 3, and so you should treat this component as a whole as being under\\n// the GPL version 3. But all Cartesi-written code in this component is licensed\\n// under the Apache License, version 2, or a compatible permissive license, and can\\n// be used independently under the Apache v2 license. After this component is\\n// rewritten, the entire component will be released under the Apache v2 license.\\n\\n\\n/// @title MachineInterface interface contract\\npragma solidity ^0.7.0;\\n\\n\\ninterface MachineInterface {\\n    event StepGiven(uint8 exitCode);\\n\\n    function step(\\n        uint64[] memory _rwPositions,\\n        bytes8[] memory _rwValues,\\n        bool[] memory _isRead\\n    ) external returns (uint8, uint256);\\n\\n    function getMemoryInteractor() external view returns (address);\\n}\\n\",\"keccak256\":\"0x227a51ac54bc8246aec29d73bc48701c6c2bcd0ad0b606105c079f31283526d7\",\"license\":\"GPL-3.0-only\"},\"@cartesi/arbitration/contracts/PartitionInterface.sol\":{\"content\":\"// Copyright (C) 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n// This program is free software: you can redistribute it and/or modify it under\\n// the terms of the GNU General Public License as published by the Free Software\\n// Foundation, either version 3 of the License, or (at your option) any later\\n// version.\\n\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY\\n// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\\n// PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\n// Note: This component currently has dependencies that are licensed under the GNU\\n// GPL, version 3, and so you should treat this component as a whole as being under\\n// the GPL version 3. But all Cartesi-written code in this component is licensed\\n// under the Apache License, version 2, or a compatible permissive license, and can\\n// be used independently under the Apache v2 license. After this component is\\n// rewritten, the entire component will be released under the Apache v2 license.\\n\\n/// @title Abstract interface for partition instantiator\\npragma solidity ^0.7.0;\\n\\nimport \\\"@cartesi/util/contracts/Instantiator.sol\\\";\\n\\ninterface PartitionInterface is Instantiator {\\n    enum state {\\n        WaitingQuery,\\n        WaitingHashes,\\n        ChallengerWon,\\n        ClaimerWon,\\n        DivergenceFound\\n    }\\n\\n    function getCurrentState(uint256 _index) external view returns (bytes32);\\n\\n    function instantiate(\\n        address _challenger,\\n        address _claimer,\\n        bytes32 _initialHash,\\n        bytes32 _claimerFinalHash,\\n        uint256 _finalTime,\\n        uint256 _querySize,\\n        uint256 _roundDuration\\n    ) external returns (uint256);\\n\\n    function timeHash(uint256 _index, uint256 key)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    function divergenceTime(uint256 _index) external view returns (uint256);\\n\\n    function stateIsWaitingQuery(uint256 _index) external view returns (bool);\\n\\n    function stateIsWaitingHashes(uint256 _index) external view returns (bool);\\n\\n    function stateIsChallengerWon(uint256 _index) external view returns (bool);\\n\\n    function stateIsClaimerWon(uint256 _index) external view returns (bool);\\n\\n    function stateIsDivergenceFound(uint256 _index)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getPartitionGameIndex(uint256 _index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getQuerySize(uint256 _index) external view returns (uint256);\\n\\n    function getCurrentStateDeadline(uint _index) external view returns (uint time);\\n\\n    function getMaxInstanceDuration(\\n        uint256 _roundDuration,\\n        uint256 _timeToStartMachine,\\n        uint256 _partitionSize,\\n        uint256 _maxCycle,\\n        uint256 _picoSecondsToRunInsn\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc8c1bf7c3ecd4b7a14be8bf70c93aad06873180056a63af9aca10a7f0e267bf8\",\"license\":\"GPL-3.0-only\"},\"@cartesi/arbitration/contracts/VGInterface.sol\":{\"content\":\"// Copyright (C) 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n// This program is free software: you can redistribute it and/or modify it under\\n// the terms of the GNU General Public License as published by the Free Software\\n// Foundation, either version 3 of the License, or (at your option) any later\\n// version.\\n\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY\\n// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\\n// PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\n// Note: This component currently has dependencies that are licensed under the GNU\\n// GPL, version 3, and so you should treat this component as a whole as being under\\n// the GPL version 3. But all Cartesi-written code in this component is licensed\\n// under the Apache License, version 2, or a compatible permissive license, and can\\n// be used independently under the Apache v2 license. After this component is\\n// rewritten, the entire component will be released under the Apache v2 license.\\n\\n// @title Verification game instantiator\\npragma solidity ^0.7.0;\\n\\nimport \\\"@cartesi/util/contracts/Decorated.sol\\\";\\nimport \\\"@cartesi/util/contracts/Instantiator.sol\\\";\\nimport \\\"./PartitionInterface.sol\\\";\\nimport \\\"./MMInterface.sol\\\";\\nimport \\\"./MachineInterface.sol\\\";\\n\\ninterface VGInterface is Instantiator {\\n    enum state {\\n        WaitPartition,\\n        WaitMemoryProveValues,\\n        FinishedClaimerWon,\\n        FinishedChallengerWon\\n    }\\n\\n    function instantiate(\\n        address _challenger,\\n        address _claimer,\\n        uint256 _roundDuration,\\n        address _machineAddress,\\n        bytes32 _initialHash,\\n        bytes32 _claimerFinalHash,\\n        uint256 _finalTime\\n    ) external returns (uint256);\\n\\n    function getCurrentState(uint256 _index) external view returns (bytes32);\\n\\n    function stateIsFinishedClaimerWon(uint256 _index)\\n        external\\n        view\\n        returns (bool);\\n\\n    function stateIsFinishedChallengerWon(uint256 _index)\\n        external\\n        view\\n        returns (bool);\\n\\n    function winByPartitionTimeout(uint256 _index) external;\\n\\n    function startMachineRunChallenge(uint256 _index) external;\\n\\n    function settleVerificationGame(uint256 _index) external;\\n\\n    function claimVictoryByTime(uint256 _index) external;\\n\\n    //function stateIsWaitPartition(uint256 _index) public view returns (bool);\\n    //function stateIsWaitMemoryProveValues(uint256 _index) public view\\n    //  returns (bool);\\n    //function clearInstance(uint256 _index) internal;\\n    //function challengerWins(uint256 _index) private;\\n    //function claimerWins(uint256 _index) private;\\n\\n    function getPartitionQuerySize(uint256 _index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPartitionGameIndex(uint256 _index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getMaxInstanceDuration(\\n        uint256 _roundDuration,\\n        uint256 _timeToStartMachine,\\n        uint256 _partitionSize,\\n        uint256 _maxCycle,\\n        uint256 _picoSecondsToRunInsn\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x520380137623cac076f23ab845ed9f6611f56065cab174455fcf9815c81d5ba6\",\"license\":\"GPL-3.0-only\"},\"@cartesi/logger/contracts/LoggerInterface.sol\":{\"content\":\"// Copyright (C) 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n// This program is free software: you can redistribute it and/or modify it under\\n// the terms of the GNU General Public License as published by the Free Software\\n// Foundation, either version 3 of the License, or (at your option) any later\\n// version.\\n\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY\\n// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\\n// PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\n// Note: This component currently has dependencies that are licensed under the GNU\\n// GPL, version 3, and so you should treat this component as a whole as being under\\n// the GPL version 3. But all Cartesi-written code in this component is licensed\\n// under the Apache License, version 2, or a compatible permissive license, and can\\n// be used independently under the Apache v2 license. After this component is\\n// rewritten, the entire component will be released under the Apache v2 license.\\n\\n\\n/// @title Interface for logger test instantiator\\npragma solidity ^0.7.0;\\n\\n\\ninterface LoggerInterface {\\n    function isLogAvailable(bytes32 _root, uint64 _log2Size) external view returns(bool);\\n\\n    function calculateMerkleRootFromData(uint64 _log2Size, bytes8[] memory _data) external returns(bytes32);\\n}\\n\",\"keccak256\":\"0x529cc083d7bf62b13d083f10baf2b3d2b33b15612ea605fb84ec2da0c3b0e7a5\",\"license\":\"GPL-3.0-only\"},\"@cartesi/util/contracts/Decorated.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.7.0;\\n\\n\\ncontract Decorated {\\n    // This contract defines several modifiers but does not use\\n    // them - they will be used in derived contracts.\\n    modifier onlyBy(address user) {\\n        require(msg.sender == user, \\\"Cannot be called by user\\\");\\n        _;\\n    }\\n\\n    modifier onlyAfter(uint256 time) {\\n        require(block.timestamp > time, \\\"Cannot be called now\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xdbba019b8f7f93b212a5bbae402ee988321c4fa82ed2b4c9e55b4d7ddf35dcc3\",\"license\":\"Apache-2.0\"},\"@cartesi/util/contracts/Instantiator.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\npragma solidity ^0.7.0;\\n\\n\\ninterface Instantiator {\\n\\n    modifier onlyInstantiated(uint256 _index) virtual;\\n\\n    modifier onlyActive(uint256 _index) virtual;\\n\\n    modifier increasesNonce(uint256 _index) virtual;\\n\\n    function isActive(uint256 _index) external view returns (bool);\\n\\n    function getNonce(uint256 _index) external view returns (uint256);\\n\\n    function isConcerned(uint256 _index, address _user) external view returns (bool);\\n\\n    function getSubInstances(uint256 _index, address) external view returns (address[] memory _addresses, uint256[] memory _indices);\\n}\\n\",\"keccak256\":\"0x416e612dc09b10765de32ec06cf0a7ee4e050e16db8bf3b8ad832a6082b7dfd6\",\"license\":\"Apache-2.0\"},\"@cartesi/util/contracts/InstantiatorImpl.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Instantiator.sol\\\";\\n\\nabstract contract InstantiatorImpl is Instantiator {\\n    uint256 public currentIndex = 0;\\n\\n    mapping(uint256 => bool) internal active;\\n    mapping(uint256 => uint256) internal nonce;\\n\\n    modifier onlyInstantiated(uint256 _index) override {\\n        require(currentIndex > _index, \\\"Index not instantiated\\\");\\n        _;\\n    }\\n\\n    modifier onlyActive(uint256 _index) override {\\n        require(currentIndex > _index, \\\"Index not instantiated\\\");\\n        require(isActive(_index), \\\"Index inactive\\\");\\n        _;\\n    }\\n\\n    modifier increasesNonce(uint256 _index) override {\\n        nonce[_index]++;\\n        _;\\n    }\\n\\n    function isActive(uint256 _index) public override view returns (bool) {\\n        return (active[_index]);\\n    }\\n\\n    function getNonce(uint256 _index)\\n        public\\n        override\\n        view\\n        onlyActive(_index)\\n        returns (uint256 currentNonce)\\n    {\\n        return nonce[_index];\\n    }\\n\\n    function deactivate(uint256 _index) internal {\\n        active[_index] = false;\\n        nonce[_index] = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x8f8e29b807e5c55198206a370b4d8751cbd98a663e3f89faff274e2f9d7cae75\",\"license\":\"Apache-2.0\"},\"@cartesi/util/contracts/Merkle.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\n/// @title Library for Merkle proofs\\npragma solidity ^0.7.0;\\n\\n\\nlibrary Merkle {\\n    function getPristineHash(uint8 _log2Size) public pure returns (bytes32) {\\n        require(_log2Size >= 3, \\\"Has to be at least one word\\\");\\n        require(_log2Size <= 64, \\\"Cannot be bigger than the machine itself\\\");\\n\\n        bytes8 value = 0;\\n        bytes32 runningHash = keccak256(abi.encodePacked(value));\\n\\n        for (uint256 i = 3; i < _log2Size; i++) {\\n            runningHash = keccak256(abi.encodePacked(runningHash, runningHash));\\n        }\\n\\n        return runningHash;\\n    }\\n\\n    function getRoot(uint64 _position, bytes8 _value, bytes32[] memory proof) public pure returns (bytes32) {\\n        bytes32 runningHash = keccak256(abi.encodePacked(_value));\\n\\n        return getRootWithDrive(\\n            _position,\\n            3,\\n            runningHash,\\n            proof\\n        );\\n    }\\n\\n    function getRootWithDrive(\\n        uint64 _position,\\n        uint8 _logOfSize,\\n        bytes32 _drive,\\n        bytes32[] memory siblings\\n    ) public pure returns (bytes32)\\n    {\\n        require(_logOfSize >= 3, \\\"Must be at least a word\\\");\\n        require(_logOfSize <= 64, \\\"Cannot be bigger than the machine itself\\\");\\n\\n        uint64 size = uint64(2) ** _logOfSize;\\n\\n        require(((size - 1) & _position) == 0, \\\"Position is not aligned\\\");\\n        require(siblings.length == 64 - _logOfSize, \\\"Proof length does not match\\\");\\n\\n        bytes32 drive = _drive;\\n\\n        for (uint64 i = 0; i < siblings.length; i++) {\\n            if ((_position & (size << i)) == 0) {\\n                drive = keccak256(abi.encodePacked(drive, siblings[i]));\\n            } else {\\n                drive = keccak256(abi.encodePacked(siblings[i], drive));\\n            }\\n        }\\n\\n        return drive;\\n    }\\n\\n    function getLog2Floor(uint256 number) public pure returns (uint8) {\\n\\n        uint8 result = 0;\\n\\n        uint256 checkNumber = number;\\n        checkNumber = checkNumber >> 1;\\n        while (checkNumber > 0) {\\n            ++result;\\n            checkNumber = checkNumber >> 1;\\n        }\\n\\n        return result;\\n    }\\n\\n    function isPowerOf2(uint256 number) public pure returns (bool) {\\n\\n        uint256 checkNumber = number;\\n        if (checkNumber == 0) {\\n            return false;\\n        }\\n\\n        while ((checkNumber & 1) == 0) {\\n            checkNumber = checkNumber >> 1;\\n        }\\n\\n        checkNumber = checkNumber >> 1;\\n\\n        if (checkNumber == 0) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /// @notice Calculate the root of Merkle tree from an array of power of 2 elements\\n    /// @param hashes The array containing power of 2 elements\\n    /// @return byte32 the root hash being calculated\\n    function calculateRootFromPowerOfTwo(bytes32[] memory hashes) public pure returns (bytes32) {\\n        // revert when the input is not of power of 2\\n        require(isPowerOf2(hashes.length), \\\"The input array must contain power of 2 elements\\\");\\n\\n        if (hashes.length == 1) {\\n            return hashes[0];\\n        }else {\\n            bytes32[] memory newHashes = new bytes32[](hashes.length >> 1);\\n\\n            for (uint256 i = 0; i < hashes.length; i += 2) {\\n                newHashes[i >> 1] = keccak256(abi.encodePacked(hashes[i], hashes[i + 1]));\\n            }\\n\\n            return calculateRootFromPowerOfTwo(newHashes);\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0xfab427885024176038f230531f5fbc87e80c38b22d7b5307a57a7a0b7cdfc6fe\",\"license\":\"Apache-2.0\"},\"cache/solpp-generated-contracts/CartesiCompute.sol\":{\"content\":\"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n// SPDX-License-Identifier: Apache-2.0\\n//                                  Apache License\\n//                            Version 2.0, January 2004\\n//                         http://www.apache.org/licenses/\\n\\n//    TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\\n\\n//    1. Definitions.\\n\\n//       \\\"License\\\" shall mean the terms and conditions for use, reproduction,\\n//       and distribution as defined by Sections 1 through 9 of this document.\\n\\n//       \\\"Licensor\\\" shall mean the copyright owner or entity authorized by\\n//       the copyright owner that is granting the License.\\n\\n//       \\\"Legal Entity\\\" shall mean the union of the acting entity and all\\n//       other entities that control, are controlled by, or are under common\\n//       control with that entity. For the purposes of this definition,\\n//       \\\"control\\\" means (i) the power, direct or indirect, to cause the\\n//       direction or management of such entity, whether by contract or\\n//       otherwise, or (ii) ownership of fifty percent (50%) or more of the\\n//       outstanding shares, or (iii) beneficial ownership of such entity.\\n\\n//       \\\"You\\\" (or \\\"Your\\\") shall mean an individual or Legal Entity\\n//       exercising permissions granted by this License.\\n\\n//       \\\"Source\\\" form shall mean the preferred form for making modifications,\\n//       including but not limited to software source code, documentation\\n//       source, and configuration files.\\n\\n//       \\\"Object\\\" form shall mean any form resulting from mechanical\\n//       transformation or translation of a Source form, including but\\n//       not limited to compiled object code, generated documentation,\\n//       and conversions to other media types.\\n\\n//       \\\"Work\\\" shall mean the work of authorship, whether in Source or\\n//       Object form, made available under the License, as indicated by a\\n//       copyright notice that is included in or attached to the work\\n//       (an example is provided in the Appendix below).\\n\\n//       \\\"Derivative Works\\\" shall mean any work, whether in Source or Object\\n//       form, that is based on (or derived from) the Work and for which the\\n//       editorial revisions, annotations, elaborations, or other modifications\\n//       represent, as a whole, an original work of authorship. For the purposes\\n//       of this License, Derivative Works shall not include works that remain\\n//       separable from, or merely link (or bind by name) to the interfaces of,\\n//       the Work and Derivative Works thereof.\\n\\n//       \\\"Contribution\\\" shall mean any work of authorship, including\\n//       the original version of the Work and any modifications or additions\\n//       to that Work or Derivative Works thereof, that is intentionally\\n//       submitted to Licensor for inclusion in the Work by the copyright owner\\n//       or by an individual or Legal Entity authorized to submit on behalf of\\n//       the copyright owner. For the purposes of this definition, \\\"submitted\\\"\\n//       means any form of electronic, verbal, or written communication sent\\n//       to the Licensor or its representatives, including but not limited to\\n//       communication on electronic mailing lists, source code control systems,\\n//       and issue tracking systems that are managed by, or on behalf of, the\\n//       Licensor for the purpose of discussing and improving the Work, but\\n//       excluding communication that is conspicuously marked or otherwise\\n//       designated in writing by the copyright owner as \\\"Not a Contribution.\\\"\\n\\n//       \\\"Contributor\\\" shall mean Licensor and any individual or Legal Entity\\n//       on behalf of whom a Contribution has been received by Licensor and\\n//       subsequently incorporated within the Work.\\n\\n//    2. Grant of Copyright License. Subject to the terms and conditions of\\n//       this License, each Contributor hereby grants to You a perpetual,\\n//       worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n//       copyright license to reproduce, prepare Derivative Works of,\\n//       publicly display, publicly perform, sublicense, and distribute the\\n//       Work and such Derivative Works in Source or Object form.\\n\\n//    3. Grant of Patent License. Subject to the terms and conditions of\\n//       this License, each Contributor hereby grants to You a perpetual,\\n//       worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n//       (except as stated in this section) patent license to make, have made,\\n//       use, offer to sell, sell, import, and otherwise transfer the Work,\\n//       where such license applies only to those patent claims licensable\\n//       by such Contributor that are necessarily infringed by their\\n//       Contribution(s) alone or by combination of their Contribution(s)\\n//       with the Work to which such Contribution(s) was submitted. If You\\n//       institute patent litigation against any entity (including a\\n//       cross-claim or counterclaim in a lawsuit) alleging that the Work\\n//       or a Contribution incorporated within the Work constitutes direct\\n//       or contributory patent infringement, then any patent licenses\\n//       granted to You under this License for that Work shall terminate\\n//       as of the date such litigation is filed.\\n\\n//    4. Redistribution. You may reproduce and distribute copies of the\\n//       Work or Derivative Works thereof in any medium, with or without\\n//       modifications, and in Source or Object form, provided that You\\n//       meet the following conditions:\\n\\n//       (a) You must give any other recipients of the Work or\\n//           Derivative Works a copy of this License; and\\n\\n//       (b) You must cause any modified files to carry prominent notices\\n//           stating that You changed the files; and\\n\\n//       (c) You must retain, in the Source form of any Derivative Works\\n//           that You distribute, all copyright, patent, trademark, and\\n//           attribution notices from the Source form of the Work,\\n//           excluding those notices that do not pertain to any part of\\n//           the Derivative Works; and\\n\\n//       (d) If the Work includes a \\\"NOTICE\\\" text file as part of its\\n//           distribution, then any Derivative Works that You distribute must\\n//           include a readable copy of the attribution notices contained\\n//           within such NOTICE file, excluding those notices that do not\\n//           pertain to any part of the Derivative Works, in at least one\\n//           of the following places: within a NOTICE text file distributed\\n//           as part of the Derivative Works; within the Source form or\\n//           documentation, if provided along with the Derivative Works; or,\\n//           within a display generated by the Derivative Works, if and\\n//           wherever such third-party notices normally appear. The contents\\n//           of the NOTICE file are for informational purposes only and\\n//           do not modify the License. You may add Your own attribution\\n//           notices within Derivative Works that You distribute, alongside\\n//           or as an addendum to the NOTICE text from the Work, provided\\n//           that such additional attribution notices cannot be construed\\n//           as modifying the License.\\n\\n//       You may add Your own copyright statement to Your modifications and\\n//       may provide additional or different license terms and conditions\\n//       for use, reproduction, or distribution of Your modifications, or\\n//       for any such Derivative Works as a whole, provided Your use,\\n//       reproduction, and distribution of the Work otherwise complies with\\n//       the conditions stated in this License.\\n\\n//    5. Submission of Contributions. Unless You explicitly state otherwise,\\n//       any Contribution intentionally submitted for inclusion in the Work\\n//       by You to the Licensor shall be under the terms and conditions of\\n//       this License, without any additional terms or conditions.\\n//       Notwithstanding the above, nothing herein shall supersede or modify\\n//       the terms of any separate license agreement you may have executed\\n//       with Licensor regarding such Contributions.\\n\\n//    6. Trademarks. This License does not grant permission to use the trade\\n//       names, trademarks, service marks, or product names of the Licensor,\\n//       except as required for reasonable and customary use in describing the\\n//       origin of the Work and reproducing the content of the NOTICE file.\\n\\n//    7. Disclaimer of Warranty. Unless required by applicable law or\\n//       agreed to in writing, Licensor provides the Work (and each\\n//       Contributor provides its Contributions) on an \\\"AS IS\\\" BASIS,\\n//       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\\n//       implied, including, without limitation, any warranties or conditions\\n//       of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\\n//       PARTICULAR PURPOSE. You are solely responsible for determining the\\n//       appropriateness of using or redistributing the Work and assume any\\n//       risks associated with Your exercise of permissions under this License.\\n\\n//    8. Limitation of Liability. In no event and under no legal theory,\\n//       whether in tort (including negligence), contract, or otherwise,\\n//       unless required by applicable law (such as deliberate and grossly\\n//       negligent acts) or agreed to in writing, shall any Contributor be\\n//       liable to You for damages, including any direct, indirect, special,\\n//       incidental, or consequential damages of any character arising as a\\n//       result of this License or out of the use or inability to use the\\n//       Work (including but not limited to damages for loss of goodwill,\\n//       work stoppage, computer failure or malfunction, or any and all\\n//       other commercial damages or losses), even if such Contributor\\n//       has been advised of the possibility of such damages.\\n\\n//    9. Accepting Warranty or Additional Liability. While redistributing\\n//       the Work or Derivative Works thereof, You may choose to offer,\\n//       and charge a fee for, acceptance of support, warranty, indemnity,\\n//       or other liability obligations and/or rights consistent with this\\n//       License. However, in accepting such obligations, You may act only\\n//       on Your own behalf and on Your sole responsibility, not on behalf\\n//       of any other Contributor, and only if You agree to indemnify,\\n//       defend, and hold each Contributor harmless for any liability\\n//       incurred by, or claims asserted against, such Contributor by reason\\n//       of your accepting any such warranty or additional liability.\\n\\n//    END OF TERMS AND CONDITIONS\\n\\n//    Copyright (C) 2020 Cartesi Pte. Ltd.\\n\\n//    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n//    you may not use this file except in compliance with the License.\\n//    You may obtain a copy of the License at\\n\\n//        http://www.apache.org/licenses/LICENSE-2.0\\n\\n//    Unless required by applicable law or agreed to in writing, software\\n//    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n//    See the License for the specific language governing permissions and\\n//    limitations under the License.\\n\\n/// @title CartesiCompute\\n/// @author Stephen Chen\\n\\n\\n\\nimport \\\"@cartesi/util/contracts/Merkle.sol\\\";\\nimport \\\"@cartesi/util/contracts/Decorated.sol\\\";\\nimport \\\"@cartesi/util/contracts/InstantiatorImpl.sol\\\";\\nimport \\\"@cartesi/logger/contracts/LoggerInterface.sol\\\";\\nimport \\\"@cartesi/arbitration/contracts/VGInterface.sol\\\";\\nimport \\\"./CartesiComputeInterface.sol\\\";\\n\\ncontract CartesiCompute is\\n    InstantiatorImpl,\\n    Decorated,\\n    CartesiComputeInterface\\n{\\n    address machine; // machine which will run the challenge\\n    LoggerInterface li;\\n    VGInterface vg;\\n\\n    struct CartesiComputeCtx {\\n        address owner; // the one who has power to shutdown the instance\\n        uint256 revealDrivesPointer; // the pointer to the current reveal drive\\n        uint256 providerDrivesPointer; // the pointer to the current provider drive\\n        uint256 finalTime; // max number of machine cycle to run\\n        uint64 outputPosition; // memory position of machine output\\n        uint8 outputLog2Size; // log2 size of the output drive in the unit of bytes\\n        uint256 roundDuration; // time interval to interact with this contract\\n        uint256 timeOfLastMove; // last time someone made a move with deadline\\n        uint256 vgInstance;\\n        bytes32 templateHash; // pristine hash of machine\\n        bytes32 initialHash; // initial hash with all drives mounted\\n        bytes32 claimedFinalHash; // claimed final hash of the machine\\n        bytes claimedOutput; // claimed final machine output\\n        address[] partiesArray; // user can challenge claimer's output\\n        address[] confirmedParties; // parties that have confirmed the current claim\\n        uint64 claimer; // responsible for claiming the machine output\\n        uint64 currentChallenger; // it tracks who did the last challenge\\n        uint64 votesCounter; // helps manage end state\\n        mapping(address => Party) parties; // control structure for challengers\\n        State currentState;\\n        uint256[] revealDrives; // indices of the reveal drives\\n        uint256[] providerDrives; // indices of the provider drives\\n        bytes32[] driveHash; // root hash of the drives\\n        Drive[] inputDrives;\\n        bool noChallengeDrive; // if data is available and content cannot be challenged\\n    }\\n\\n    mapping(uint256 => CartesiComputeCtx) internal instance;\\n\\n    // These are the possible states and transitions of the contract.\\n\\n    // +---+\\n    // |   |\\n    // +---+\\n    //   |\\n    //   | instantiate\\n    //   v\\n    // +------------------+    abortByDeadline    +------------------------+\\n    // | WaitingProviders |---------------------->| ProviderMissedDeadline |\\n    // +------------------+                       +------------------------+\\n    //   |\\n    //   | provideLoggerDrive\\n    //   | or\\n    //   | provideDirectDrive\\n    //   v\\n    // +----------------+   abortByDeadline    +------------------------+\\n    // | WaitingReveals |--------------------->| ProviderMissedDeadline |\\n    // +----------------+                      +------------------------+\\n    //   |\\n    //   | revealLoggerDrive\\n    //   v\\n    // +--------------+   abortByDeadline    +-----------------------+\\n    // | WaitingClaim |--------------------->| ClaimerMissedDeadline |\\n    // +--------------+                      +-----------------------+\\n    //   |\\n    //   |\\n    //   |\\n    //   | submitClaim\\n    //   v\\n    // +-----------------------------+             +-----------------+\\n    // | WaitingConfirmationDeadline |------------>| ConsensusResult |\\n    // +----------------------------+   deadline  +-----------------+\\n    //   |\\n    //   |\\n    //   | challenge\\n    //   v\\n    // +------------------------+    winByVG     +------------+  if there are challengers\\n    // | WaitingChallengeResult |--------------->| ClaimerWon |-----------------------> WaitingConfirmationDeadline\\n    // +-----------------------+                +------------+    left; go back to\\n    //   |\\n    //   |\\n    //   |                  winByVG        +---------------+  if there are challengers\\n    //   +-------------------------------->| ChallengerWon |------------------------> WaitingClaim\\n    //                                     +---------------+  left; go back to\\n    //\\n\\n    event CartesiComputeCreated(uint256 _index);\\n    event ClaimSubmitted(uint256 _index, bytes32 _claimedFinalHash);\\n    event ChallengeStarted(uint256 _index);\\n    event CartesiComputeFinished(uint256 _index, bytes32 _state);\\n    event DriveInserted(uint256 _index, Drive _drive);\\n    event Confirmed(uint256 _index, address _confirmParty);\\n\\n    constructor(\\n        address _liAddress,\\n        address _vgAddress,\\n        address _machineAddress\\n    ) {\\n        machine = _machineAddress;\\n        vg = VGInterface(_vgAddress);\\n        li = LoggerInterface(_liAddress);\\n    }\\n\\n    /// @notice Instantiate a Cartesi Compute SDK instance.\\n    /// @param _finalTime max cycle of the machine for that computation\\n    /// @param _templateHash hash of the machine with all drives empty\\n    /// @param _outputPosition position of the output drive\\n    /// @param _roundDuration duration of the round (security param)\\n    /// @param _inputDrives an array of drive which assemble the machine\\n    /// @param _noChallengeDrive bool indicating if content is challengeable\\n    /// @return uint256, Cartesi Compute index\\n    function instantiate(\\n        uint256 _finalTime,\\n        bytes32 _templateHash,\\n        uint64 _outputPosition,\\n        uint8 _outputLog2Size,\\n        uint256 _roundDuration,\\n        address[] memory parties,\\n        Drive[] memory _inputDrives,\\n        bool _noChallengeDrive\\n    ) public override returns (uint256) {\\n        require(_roundDuration >= 50, \\\"round duration must be 50+ seconds\\\");\\n        CartesiComputeCtx storage i = instance[currentIndex];\\n\\n        for (uint64 j = 0; j < parties.length; j++) {\\n            require(\\n                i.parties[parties[j]].isParty == false,\\n                \\\"Party addresses must be unique\\\"\\n            );\\n            i.parties[parties[j]].isParty = true;\\n            i.parties[parties[j]].arrayIdx = j;\\n            i.partiesArray.push(parties[j]);\\n        }\\n\\n        bool needsProviderPhase = false;\\n        uint256 drivesLength = _inputDrives.length;\\n        i.driveHash = new bytes32[](drivesLength);\\n        i.noChallengeDrive = _noChallengeDrive;\\n\\n        for (uint256 j = 0; j < drivesLength; j++) {\\n            Drive memory drive = _inputDrives[j];\\n\\n            if (!drive.needsLogger) {\\n                // direct drive\\n                require(\\n                    drive.driveLog2Size >= 3,\\n                    \\\"directValue has to be at least one word\\\"\\n                );\\n\\n                if (!drive.waitsProvider) {\\n                    // direct drive provided at instantiation\\n                    require(\\n                        drive.directValue.length <= 2**drive.driveLog2Size,\\n                        \\\"Input bytes length exceeds claimed log2 size\\\"\\n                    );\\n\\n                    // pad zero to the directValue if it's not exact power of 2\\n                    bytes memory paddedDirectValue = drive.directValue;\\n                    if (drive.directValue.length < 2**drive.driveLog2Size) {\\n                        paddedDirectValue = abi.encodePacked(\\n                            drive.directValue,\\n                            new bytes(\\n                                2**drive.driveLog2Size -\\n                                    drive.directValue.length\\n                            )\\n                        );\\n                    }\\n\\n                    bytes32[] memory data = getWordHashesFromBytes(\\n                        paddedDirectValue\\n                    );\\n                    i.driveHash[j] = Merkle.calculateRootFromPowerOfTwo(data);\\n                } else {\\n                    // direct drive provided in later ProviderPhase\\n                    needsProviderPhase = true;\\n                    i.providerDrives.push(j);\\n                }\\n            } else {\\n                // large drive\\n                if (!drive.waitsProvider) {\\n                    // large drive provided with logger hash at instantiation\\n                    i.driveHash[j] = drive.loggerRootHash;\\n                    if (\\n                        !li.isLogAvailable(\\n                            drive.loggerRootHash,\\n                            drive.driveLog2Size\\n                        ) && drive.provider != address(0)\\n                    ) {\\n                        // offchain drive has provider being address(0)\\n                        // cannot be revealed and challenged\\n                        i.revealDrives.push(j);\\n                    }\\n                } else {\\n                    // large drive provided with logger hash in later ProviderPhase\\n                    needsProviderPhase = true;\\n                    i.providerDrives.push(j);\\n                }\\n            }\\n            i.inputDrives.push(\\n                Drive(\\n                    drive.position,\\n                    drive.driveLog2Size,\\n                    drive.directValue,\\n                    drive.loggerIpfsPath,\\n                    drive.loggerRootHash,\\n                    drive.provider,\\n                    drive.waitsProvider,\\n                    drive.needsLogger,\\n                    drive.downloadAsCAR\\n                )\\n            );\\n        }\\n\\n        require(\\n            _outputLog2Size >= 3,\\n            \\\"output drive has to be at least one word\\\"\\n        );\\n\\n        i.owner = msg.sender;\\n        // i.claimer = 0; parties[0]; // first on the list is selected to be claimer\\n        i.votesCounter = 1; // first vote is always a submitClaim, so we count it once here\\n        i.finalTime = _finalTime;\\n        i.templateHash = _templateHash;\\n        i.initialHash = _templateHash;\\n        i.outputPosition = _outputPosition;\\n        i.outputLog2Size = _outputLog2Size;\\n        i.roundDuration = _roundDuration;\\n        i.timeOfLastMove = block.timestamp;\\n        if (needsProviderPhase) {\\n            i.currentState = State.WaitingProviders;\\n        } else if (i.revealDrives.length > 0) {\\n            i.currentState = State.WaitingChallengeDrives;\\n        } else {\\n            i.currentState = State.WaitingClaim;\\n        }\\n\\n        emit CartesiComputeCreated(currentIndex);\\n        active[currentIndex] = true;\\n        return currentIndex++;\\n    }\\n\\n    /// @notice Challenger disputes the claim, starting a verification game.\\n    /// @param _index index of Cartesi Compute instance which challenger is starting the VG.\\n    function challenge(uint256 _index)\\n        public\\n        onlyActive(_index)\\n        onlyByParty(_index)\\n        onlyNoVotes(_index)\\n        increasesNonce(_index)\\n    {\\n        CartesiComputeCtx storage i = instance[_index];\\n        require(\\n            i.currentState == State.WaitingConfirmationDeadline,\\n            \\\"State should be WaitingConfirmationDeadline\\\"\\n        );\\n\\n        i.vgInstance = vg.instantiate(\\n            msg.sender, // challenger\\n            i.partiesArray[i.claimer],\\n            i.roundDuration,\\n            machine,\\n            i.initialHash,\\n            i.claimedFinalHash,\\n            i.finalTime\\n        );\\n        i.currentState = State.WaitingChallengeResult;\\n        i.parties[msg.sender].hasVoted = true;\\n        i.currentChallenger = i.parties[msg.sender].arrayIdx;\\n        i.votesCounter++;\\n        i.timeOfLastMove = block.timestamp;\\n\\n        // @dev should we update timeOfLastMove over here too?\\n        emit ChallengeStarted(_index);\\n    }\\n\\n    /// @notice Party confirms the claim\\n    /// @param _index index of Cartesi Compute instance which claimer being confirmed\\n    function confirm(uint256 _index)\\n        public\\n        onlyActive(_index)\\n        onlyByParty(_index)\\n        onlyNoVotes(_index)\\n        increasesNonce(_index)\\n    {\\n        CartesiComputeCtx storage i = instance[_index];\\n        require(\\n            i.currentState == State.WaitingConfirmationDeadline,\\n            \\\"State should be WaitingConfirmationDeadline\\\"\\n        );\\n\\n        // record parties have confirmed current claim\\n        i.confirmedParties.push(msg.sender);\\n        i.parties[msg.sender].hasVoted = true;\\n        i.votesCounter++;\\n        // i.timeOfLastMove = block.timestamp;\\n\\n        emit Confirmed(_index, msg.sender);\\n\\n        if (i.votesCounter == i.partiesArray.length) {\\n            i.currentState = State.ConsensusResult;\\n            emit CartesiComputeFinished(_index, getCurrentState(_index));\\n        }\\n\\n        return;\\n    }\\n\\n    /// @notice User requesting content of all drives to be revealed.\\n    /// @param _index index of Cartesi Compute instance which is requested for the drives\\n    function challengeDrives(uint256 _index)\\n        public\\n        onlyActive(_index)\\n        increasesNonce(_index)\\n    {\\n        CartesiComputeCtx storage i = instance[_index];\\n        require(!i.noChallengeDrive, \\\"Ctx marked as no challenge drive\\\");\\n        require(\\n            i.currentState == State.WaitingChallengeDrives,\\n            \\\"State should be WaitingChallengeDrives\\\"\\n        );\\n        require(\\n            i.parties[msg.sender].isParty,\\n            \\\"Only concerned users can challengDrives\\\"\\n        );\\n\\n        i.currentState = State.WaitingReveals;\\n        i.timeOfLastMove = block.timestamp;\\n    }\\n\\n    /// @notice Claimer claims the machine final hash and also validate the drives and initial hash of the machine.\\n    /// @param _claimedFinalHash is the final hash of the machine\\n    /// @param _drivesSiblings is an array of siblings of each drive (see below example)\\n    /// @param _output is the bytes32 value of the output position\\n    /// @param _outputSiblings is the siblings of the output drive\\n    /// @dev Example: consider 3 drives, the first drive's siblings should be a pristine machine.\\n    ///      The second drive's siblings should be the machine with drive 1 mounted.\\n    ///      The third drive's siblings should be the machine with drive 2 mounted.\\n    function submitClaim(\\n        uint256 _index,\\n        bytes32 _claimedFinalHash,\\n        bytes32[][] memory _drivesSiblings,\\n        bytes memory _output,\\n        bytes32[] memory _outputSiblings\\n    ) public onlyActive(_index) onlyByClaimer(_index) increasesNonce(_index) {\\n        CartesiComputeCtx storage i = instance[_index];\\n        bool deadlinePassed = block.timestamp >\\n            i.timeOfLastMove + getMaxStateDuration(_index);\\n        require(\\n            i.currentState == State.WaitingClaim ||\\n                (i.currentState == State.WaitingChallengeDrives &&\\n                    deadlinePassed),\\n            \\\"State must be WaitingClaim or WaitingChallengeDrives, w/ deadline passed\\\"\\n        );\\n        require(\\n            i.inputDrives.length == _drivesSiblings.length,\\n            \\\"Claimed drive number should match claimed siblings number\\\"\\n        );\\n        require(\\n            _output.length == 2**i.outputLog2Size,\\n            \\\"Output length doesn't match output log2 size\\\"\\n        );\\n\\n        bytes32[] memory data = getWordHashesFromBytes(_output);\\n        require(\\n            Merkle.getRootWithDrive(\\n                i.outputPosition,\\n                i.outputLog2Size,\\n                Merkle.calculateRootFromPowerOfTwo(data),\\n                _outputSiblings\\n            ) == _claimedFinalHash,\\n            \\\"Output not in final hash\\\"\\n        );\\n\\n        uint256 drivesLength = i.inputDrives.length;\\n        for (uint256 j = 0; j < drivesLength; j++) {\\n            bytes32[] memory driveSiblings = _drivesSiblings[j];\\n            require(\\n                Merkle.getRootWithDrive(\\n                    i.inputDrives[j].position,\\n                    i.inputDrives[j].driveLog2Size,\\n                    Merkle.getPristineHash(\\n                        uint8(i.inputDrives[j].driveLog2Size)\\n                    ),\\n                    driveSiblings\\n                ) == i.initialHash,\\n                \\\"Drive siblings must be compatible with previous initial hash for empty drive\\\"\\n            );\\n            i.initialHash = Merkle.getRootWithDrive(\\n                i.inputDrives[j].position,\\n                i.inputDrives[j].driveLog2Size,\\n                i.driveHash[j],\\n                driveSiblings\\n            );\\n        }\\n\\n        i.claimedFinalHash = _claimedFinalHash;\\n        i.currentState = State.WaitingConfirmationDeadline;\\n        i.claimedOutput = _output;\\n        i.parties[i.partiesArray[i.claimer]].hasVoted = true;\\n        i.timeOfLastMove = block.timestamp;\\n\\n        emit ClaimSubmitted(_index, _claimedFinalHash);\\n    }\\n\\n    /// @notice Is the given user concern about this instance.\\n    function isConcerned(uint256 _index, address _user)\\n        public\\n        view\\n        override\\n        onlyInstantiated(_index)\\n        returns (bool)\\n    {\\n        CartesiComputeCtx storage i = instance[_index];\\n        return i.parties[_user].isParty;\\n    }\\n\\n    function getPartyState(uint256 _index, address _p)\\n        public\\n        view\\n        onlyInstantiated(_index)\\n        returns (\\n            bool isParty,\\n            bool hasVoted,\\n            bool hasCheated\\n        )\\n    {\\n        Party storage party = instance[_index].parties[_p];\\n        isParty = party.isParty;\\n        hasVoted = party.hasVoted;\\n        hasCheated = party.hasCheated;\\n    }\\n\\n    /// @notice Get state of the instance concerning given user.\\n    function getState(uint256 _index, address _user)\\n        public\\n        view\\n        onlyInstantiated(_index)\\n        returns (\\n            uint256[] memory,\\n            address[] memory,\\n            bytes32[] memory,\\n            bytes memory,\\n            Drive[] memory,\\n            Party memory user,\\n            bool noChallengeDrive\\n        )\\n    {\\n        CartesiComputeCtx storage i = instance[_index];\\n\\n        user = i.parties[_user];\\n\\n        uint256[] memory uintValues = new uint256[](4);\\n        uintValues[0] = i.finalTime;\\n        uintValues[1] = i.timeOfLastMove + getMaxStateDuration(_index);\\n        uintValues[2] = i.outputPosition;\\n        uintValues[3] = i.outputLog2Size;\\n\\n        address[] memory addressValues = new address[](2);\\n        if (i.currentChallenger != 0)\\n            addressValues[0] = i.partiesArray[i.currentChallenger];\\n        addressValues[1] = i.partiesArray[i.claimer];\\n\\n        bytes32[] memory bytes32Values = new bytes32[](4);\\n        bytes32Values[0] = i.templateHash;\\n        bytes32Values[1] = i.initialHash;\\n        bytes32Values[2] = i.claimedFinalHash;\\n        bytes32Values[3] = getCurrentState(_index);\\n\\n        if (i.currentState == State.WaitingProviders) {\\n            Drive[] memory drives = new Drive[](1);\\n            drives[0] = i.inputDrives[\\n                i.providerDrives[i.providerDrivesPointer]\\n            ];\\n            return (\\n                uintValues,\\n                addressValues,\\n                bytes32Values,\\n                i.claimedOutput,\\n                drives,\\n                user,\\n                i.noChallengeDrive\\n            );\\n        } else if (i.currentState == State.WaitingReveals) {\\n            Drive[] memory drives = new Drive[](1);\\n            drives[0] = i.inputDrives[i.revealDrives[i.revealDrivesPointer]];\\n            return (\\n                uintValues,\\n                addressValues,\\n                bytes32Values,\\n                i.claimedOutput,\\n                drives,\\n                user,\\n                i.noChallengeDrive\\n            );\\n        } else if (i.currentState == State.ProviderMissedDeadline) {\\n            Drive[] memory drives = new Drive[](0);\\n            return (\\n                uintValues,\\n                addressValues,\\n                bytes32Values,\\n                i.claimedOutput,\\n                drives,\\n                user,\\n\\t\\ti.noChallengeDrive\\n            );\\n        } else {\\n            return (\\n                uintValues,\\n                addressValues,\\n                bytes32Values,\\n                i.claimedOutput,\\n                i.inputDrives,\\n                user,\\n\\t\\ti.noChallengeDrive\\n            );\\n        }\\n    }\\n\\n    function getCurrentState(uint256 _index)\\n        public\\n        view\\n        onlyInstantiated(_index)\\n        returns (bytes32)\\n    {\\n        State currentState = instance[_index].currentState;\\n        if (currentState == State.WaitingProviders) {\\n            return \\\"WaitingProviders\\\";\\n        }\\n        if (currentState == State.WaitingReveals) {\\n            return \\\"WaitingReveals\\\";\\n        }\\n        if (currentState == State.WaitingChallengeDrives) {\\n            return \\\"WaitingChallengeDrives\\\";\\n        }\\n        if (currentState == State.ClaimerMissedDeadline) {\\n            return \\\"ClaimerMissedDeadline\\\";\\n        }\\n        if (currentState == State.ProviderMissedDeadline) {\\n            return \\\"ProviderMissedDeadline\\\";\\n        }\\n        if (currentState == State.WaitingClaim) {\\n            return \\\"WaitingClaim\\\";\\n        }\\n        if (currentState == State.WaitingConfirmationDeadline) {\\n            return \\\"WaitingConfirmationDeadline\\\";\\n        }\\n        if (currentState == State.WaitingChallengeResult) {\\n            return \\\"WaitingChallengeResult\\\";\\n        }\\n        if (currentState == State.ConsensusResult) {\\n            return \\\"ConsensusResult\\\";\\n        }\\n        if (currentState == State.ChallengerWon) {\\n            return \\\"ChallengerWon\\\";\\n        }\\n        if (currentState == State.ClaimerWon) {\\n            return \\\"ClaimerWon\\\";\\n        }\\n\\n        revert(\\\"Unrecognized state\\\");\\n    }\\n\\n    /// @notice Get sub-instances of the instance.\\n    function getSubInstances(uint256 _index, address)\\n        public\\n        view\\n        override\\n        onlyInstantiated(_index)\\n        returns (address[] memory _addresses, uint256[] memory _indices)\\n    {\\n        address[] memory a;\\n        uint256[] memory i;\\n\\n        if (instance[_index].currentState == State.WaitingChallengeResult) {\\n            a = new address[](1);\\n            i = new uint256[](1);\\n            a[0] = address(vg);\\n            i[0] = instance[_index].vgInstance;\\n        } else {\\n            a = new address[](0);\\n            i = new uint256[](0);\\n        }\\n        return (a, i);\\n    }\\n\\n    /// @notice Provide the content of a direct drive (only drive provider can call it).\\n    /// @param _index index of Cartesi Compute instance the drive belongs to.\\n    /// @param _value bytes value of the direct drive\\n    function provideDirectDrive(uint256 _index, bytes memory _value)\\n        public\\n        onlyActive(_index)\\n        requirementsForProviderDrive(_index)\\n    {\\n        CartesiComputeCtx storage i = instance[_index];\\n        uint256 driveIndex = i.providerDrives[i.providerDrivesPointer];\\n        Drive storage drive = i.inputDrives[driveIndex];\\n\\n        require(!drive.needsLogger, \\\"Invalid drive to claim for direct value\\\");\\n        require(\\n            _value.length <= 2**drive.driveLog2Size,\\n            \\\"Input bytes length exceeds claimed log2 size\\\"\\n        );\\n\\n        // pad zero to the directValue if it's not exact power of 2\\n        bytes memory paddedDirectValue = _value;\\n        if (_value.length < 2**drive.driveLog2Size) {\\n            paddedDirectValue = abi.encodePacked(\\n                _value,\\n                new bytes(2**drive.driveLog2Size - _value.length)\\n            );\\n        }\\n\\n        bytes32[] memory data = getWordHashesFromBytes(paddedDirectValue);\\n        bytes32 driveHash = Merkle.calculateRootFromPowerOfTwo(data);\\n\\n        drive.directValue = _value;\\n        i.driveHash[driveIndex] = driveHash;\\n        i.providerDrivesPointer++;\\n        i.timeOfLastMove = block.timestamp;\\n\\n        if (i.providerDrivesPointer == i.providerDrives.length) {\\n            if (i.revealDrives.length > 0) {\\n                i.currentState = State.WaitingChallengeDrives;\\n            } else {\\n                i.currentState = State.WaitingClaim;\\n            }\\n        }\\n\\n        emit DriveInserted(_index, i.inputDrives[driveIndex]);\\n    }\\n\\n    /// @notice Provide the root hash of a logger drive (only drive provider can call it).\\n    /// @param _index index of CartesiCompute instance the drive belongs to\\n    /// @param _root root hash of the logger drive\\n    function provideLoggerDrive(uint256 _index, bytes32 _root)\\n        public\\n        onlyActive(_index)\\n        requirementsForProviderDrive(_index)\\n    {\\n        CartesiComputeCtx storage i = instance[_index];\\n        uint256 driveIndex = i.providerDrives[i.providerDrivesPointer];\\n        Drive storage drive = i.inputDrives[driveIndex];\\n\\n        require(drive.needsLogger, \\\"Invalid drive to claim for logger\\\");\\n\\n        drive.loggerRootHash = _root;\\n        i.driveHash[driveIndex] = drive.loggerRootHash;\\n        i.providerDrivesPointer++;\\n        i.timeOfLastMove = block.timestamp;\\n\\n        if (i.providerDrivesPointer == i.providerDrives.length) {\\n            if (i.revealDrives.length > 0) {\\n                i.currentState = State.WaitingChallengeDrives;\\n            } else {\\n                i.currentState = State.WaitingClaim;\\n            }\\n        }\\n\\n        emit DriveInserted(_index, i.inputDrives[driveIndex]);\\n    }\\n\\n    /// @notice Reveal the content of a logger drive (only drive provider can call it).\\n    /// @param _index index of Cartesi Compute instance the drive belongs to\\n    function revealLoggerDrive(uint256 _index) public onlyActive(_index) {\\n        CartesiComputeCtx storage i = instance[_index];\\n        require(\\n            i.currentState == State.WaitingReveals,\\n            \\\"State != WaitingReveals\\\"\\n        );\\n\\n        uint256 driveIndex = i.revealDrives[i.revealDrivesPointer];\\n        require(driveIndex < i.inputDrives.length, \\\"Invalid driveIndex\\\");\\n\\n        Drive memory drive = i.inputDrives[driveIndex];\\n\\n        require(drive.needsLogger, \\\"needsLogger should be true\\\");\\n        require(\\n            li.isLogAvailable(drive.loggerRootHash, drive.driveLog2Size),\\n            \\\"Logger drive not available\\\"\\n        );\\n\\n        i.revealDrivesPointer++;\\n        i.timeOfLastMove = block.timestamp;\\n\\n        if (i.revealDrivesPointer == i.revealDrives.length) {\\n            i.currentState = State.WaitingClaim;\\n        }\\n    }\\n\\n    /// @notice In case one of the parties wins the verification game,\\n    ///         then he or she can call this function to claim victory in\\n    ///         this contract as well.\\n    /// @param _index index of Cartesi Compute instance to win\\n    function winByVG(uint256 _index)\\n        public\\n        onlyActive(_index)\\n        increasesNonce(_index)\\n    {\\n        CartesiComputeCtx storage i = instance[_index];\\n        require(\\n            i.currentState == State.WaitingChallengeResult,\\n            \\\"State != WaitingChallengeResult, cannot winByVG\\\"\\n        );\\n        i.timeOfLastMove = block.timestamp;\\n        uint256 vgIndex = i.vgInstance;\\n\\n        if (vg.stateIsFinishedChallengerWon(vgIndex)) {\\n            i.parties[i.partiesArray[i.claimer]].hasCheated = true;\\n            // all parties have confirmed cheated claimer should be reset\\n            // this is a protection to avoid claimer losing dispute on purpose\\n            for (uint256 p = 0; p < i.confirmedParties.length; p++) {\\n                i.parties[i.confirmedParties[p]].hasVoted = false;\\n            }\\n            i.votesCounter -= uint64(i.confirmedParties.length);\\n            // reset confirmed parties\\n            delete i.confirmedParties;\\n\\n            if (i.votesCounter == i.partiesArray.length) {\\n                i.currentState = State.ChallengerWon;\\n                emit CartesiComputeFinished(_index, getCurrentState(_index));\\n                return;\\n            }\\n            i.currentState = State.WaitingClaim;\\n            i.claimer = i.currentChallenger;\\n            i.currentChallenger = 0;\\n            return;\\n        }\\n\\n        if (vg.stateIsFinishedClaimerWon(vgIndex)) {\\n            i.parties[i.partiesArray[i.currentChallenger]].hasCheated = true;\\n            if (i.votesCounter == i.partiesArray.length) {\\n                i.currentState = State.ClaimerWon;\\n                emit CartesiComputeFinished(_index, getCurrentState(_index));\\n                return;\\n            }\\n            i.currentState = State.WaitingConfirmationDeadline;\\n            i.currentChallenger = 0;\\n            return;\\n        }\\n        require(false, \\\"VG state not final\\\");\\n    }\\n\\n    /// @notice Deactivate a Cartesi Compute SDK instance.\\n    /// @param _index index of Cartesi Compute instance to deactivate\\n    function destruct(uint256 _index)\\n        public\\n        override\\n        onlyActive(_index)\\n        onlyBy(instance[_index].owner)\\n    {\\n        CartesiComputeCtx storage i = instance[_index];\\n        require(\\n            i.currentState == State.ProviderMissedDeadline ||\\n                i.currentState == State.ClaimerMissedDeadline ||\\n                i.currentState == State.ConsensusResult ||\\n                i.currentState == State.ChallengerWon ||\\n                i.currentState == State.ClaimerWon,\\n            \\\"Cannot destruct instance at current state\\\"\\n        );\\n\\n        delete i.revealDrives;\\n        delete i.providerDrives;\\n        delete i.driveHash;\\n        delete i.inputDrives;\\n        deactivate(_index);\\n    }\\n\\n    /// @notice Abort the instance by missing deadline.\\n    /// @param _index index of Cartesi Compute instance to abort\\n    function abortByDeadline(uint256 _index) public onlyActive(_index) {\\n        CartesiComputeCtx storage i = instance[_index];\\n        bool afterDeadline = block.timestamp >\\n            (i.timeOfLastMove + getMaxStateDuration(_index));\\n\\n        require(afterDeadline, \\\"Deadline not over\\\");\\n\\n        if (i.currentState == State.WaitingProviders) {\\n            i.currentState = State.ProviderMissedDeadline;\\n            emit CartesiComputeFinished(_index, getCurrentState(_index));\\n            return;\\n        }\\n        if (i.currentState == State.WaitingReveals) {\\n            i.currentState = State.ProviderMissedDeadline;\\n            emit CartesiComputeFinished(_index, getCurrentState(_index));\\n            return;\\n        }\\n        if (i.currentState == State.WaitingClaim) {\\n            i.currentState = State.ClaimerMissedDeadline;\\n            emit CartesiComputeFinished(_index, getCurrentState(_index));\\n            return;\\n        }\\n        if (i.currentState == State.WaitingConfirmationDeadline) {\\n            i.currentState = State.ConsensusResult;\\n            emit CartesiComputeFinished(_index, getCurrentState(_index));\\n            return;\\n        }\\n\\n        revert(\\\"Cannot abort current state\\\");\\n    }\\n\\n    /// @notice Get result of a finished instance.\\n    /// @param _index index of Cartesi Compute instance to get result\\n    /// @return bool, indicates the result is ready\\n    /// @return bool, indicates the sdk is still running\\n    /// @return address, the user to blame for the abnormal stop of the sdk\\n    /// @return bytes, the result of the sdk if available\\n    function getResult(uint256 _index)\\n        public\\n        view\\n        override\\n        onlyInstantiated(_index)\\n        returns (\\n            bool,\\n            bool,\\n            address,\\n            bytes memory\\n        )\\n    {\\n        CartesiComputeCtx storage i = instance[_index];\\n        if (i.currentState == State.ConsensusResult) {\\n            return (true, false, address(0), i.claimedOutput);\\n        }\\n        if (\\n            i.currentState == State.WaitingProviders ||\\n            i.currentState == State.WaitingChallengeDrives ||\\n            i.currentState == State.WaitingClaim ||\\n            i.currentState == State.WaitingConfirmationDeadline ||\\n            i.currentState == State.WaitingChallengeResult ||\\n            i.currentState == State.WaitingReveals\\n        ) {\\n            return (false, true, address(0), \\\"\\\");\\n        }\\n        if (i.currentState == State.ProviderMissedDeadline) {\\n            address userToBlame = address(0);\\n            // check if resulted from the WaitingProviders phase\\n            if (\\n                instance[_index].providerDrivesPointer <\\n                instance[_index].providerDrives.length\\n            ) {\\n                userToBlame = i\\n                    .inputDrives[i.providerDrives[i.providerDrivesPointer]]\\n                    .provider;\\n                // check if resulted from the WaitingReveals phase\\n            } else if (\\n                instance[_index].revealDrivesPointer <\\n                instance[_index].revealDrives.length\\n            ) {\\n                userToBlame = i\\n                    .inputDrives[i.revealDrives[i.revealDrivesPointer]]\\n                    .provider;\\n            }\\n            return (false, false, userToBlame, \\\"\\\");\\n        }\\n        if (\\n            i.currentState == State.ClaimerMissedDeadline ||\\n            i.currentState == State.ChallengerWon\\n        ) {\\n            return (false, false, i.partiesArray[i.claimer], \\\"\\\");\\n        }\\n        if (i.currentState == State.ClaimerWon) {\\n            return (false, false, i.partiesArray[i.currentChallenger], \\\"\\\");\\n        }\\n\\n        revert(\\\"Unrecognized state\\\");\\n    }\\n\\n    /// @notice Convert bytes32 into bytes8[] and calculate the hashes of them\\n    function getWordHashesFromBytes32(bytes32 _value)\\n        private\\n        pure\\n        returns (bytes32[] memory)\\n    {\\n        bytes32[] memory data = new bytes32[](4);\\n        for (uint256 i = 0; i < 4; i++) {\\n            bytes8 dataBytes8 = bytes8(\\n                (_value << (i * 64)) &\\n                    0xffffffffffffffff000000000000000000000000000000000000000000000000\\n            );\\n            data[i] = keccak256(abi.encodePacked(dataBytes8));\\n        }\\n        return data;\\n    }\\n\\n    /// @notice Convert bytes into bytes8[] and calculate the hashes of them\\n    function getWordHashesFromBytes(bytes memory _value)\\n        private\\n        pure\\n        returns (bytes32[] memory)\\n    {\\n        uint256 hashesLength = _value.length / 8;\\n        bytes32[] memory data = new bytes32[](hashesLength);\\n        for (uint256 i = 0; i < hashesLength; i++) {\\n            bytes8 dataBytes8;\\n            for (uint256 j = 0; j < 8; j++) {\\n                bytes8 tempBytes8 = _value[i * 8 + j];\\n                tempBytes8 = tempBytes8 >> (j * 8);\\n                dataBytes8 = dataBytes8 | tempBytes8;\\n            }\\n            data[i] = keccak256(abi.encodePacked(dataBytes8));\\n        }\\n        return data;\\n    }\\n\\n    /// @notice Get the worst case scenario duration for a specific state\\n    function getMaxStateDuration(uint256 _index)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        // TODO: make sure maxDuration calculations are reasonable\\n        uint256 partitionSize = 1;\\n        uint256 picoSecondsToRunInsn = 500; // 500 pico seconds to run a instruction\\n        uint256 timeToStartMachine = 40; // 40 seconds to start the machine for the first time\\n\\n        if (instance[_index].currentState == State.WaitingProviders) {\\n            // time to react\\n            return instance[_index].roundDuration;\\n        }\\n\\n        if (instance[_index].currentState == State.WaitingReveals) {\\n            // time to upload to logger + time to react\\n            uint256 maxLoggerUploadTime = 40 * 60;\\n            return maxLoggerUploadTime + instance[_index].roundDuration;\\n        }\\n\\n        if (instance[_index].currentState == State.WaitingChallengeDrives) {\\n            // number of logger drives * time to react\\n            return\\n                instance[_index].revealDrives.length *\\n                2 *\\n                instance[_index].roundDuration;\\n        }\\n\\n        if (instance[_index].currentState == State.WaitingClaim) {\\n            // time to run entire machine + time to react\\n            return\\n                timeToStartMachine +\\n                ((instance[_index].finalTime * picoSecondsToRunInsn) / 1e12) +\\n                instance[_index].roundDuration;\\n        }\\n\\n        if (\\n            instance[_index].currentState == State.WaitingConfirmationDeadline\\n        ) {\\n            // time to run entire machine + time to react\\n            return\\n                timeToStartMachine +\\n                ((instance[_index].finalTime * picoSecondsToRunInsn) / 1e12) +\\n                instance[_index].roundDuration;\\n        }\\n\\n        if (instance[_index].currentState == State.WaitingChallengeResult) {\\n            // time to run a verification game + time to react\\n            return\\n                vg.getMaxInstanceDuration(\\n                    instance[_index].roundDuration,\\n                    timeToStartMachine,\\n                    partitionSize,\\n                    instance[_index].finalTime,\\n                    picoSecondsToRunInsn\\n                ) + instance[_index].roundDuration;\\n        }\\n\\n        if (\\n            instance[_index].currentState == State.ClaimerWon ||\\n            instance[_index].currentState == State.ChallengerWon ||\\n            instance[_index].currentState == State.ClaimerMissedDeadline ||\\n            instance[_index].currentState == State.ConsensusResult\\n        ) {\\n            return 0; // final state\\n        }\\n    }\\n\\n    /// @notice several require statements for a drive\\n    modifier requirementsForProviderDrive(uint256 _index) {\\n        CartesiComputeCtx storage i = instance[_index];\\n        require(\\n            i.currentState == State.WaitingProviders,\\n            \\\"State != WaitingProviders\\\"\\n        );\\n        require(\\n            i.providerDrivesPointer < i.providerDrives.length,\\n            \\\"No available pending drives\\\"\\n        );\\n\\n        uint256 driveIndex = i.providerDrives[i.providerDrivesPointer];\\n        require(driveIndex < i.inputDrives.length, \\\"Invalid drive index\\\");\\n\\n        Drive memory drive = i.inputDrives[driveIndex];\\n        require(\\n            i.driveHash[driveIndex] == bytes32(0),\\n            \\\"Drive hash shouldn't be filled\\\"\\n        );\\n        require(drive.waitsProvider, \\\"waitProvider should be true\\\");\\n        require(drive.provider == msg.sender, \\\"Sender != provider\\\");\\n\\n        _;\\n    }\\n\\n    /// @notice checks whether or not it's a party to this instance\\n    modifier onlyByParty(uint256 _index) {\\n        CartesiComputeCtx storage i = instance[_index];\\n        require(\\n            i.parties[msg.sender].isParty,\\n            \\\"Sender must be a party\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyByClaimer(uint256 _index) {\\n        CartesiComputeCtx storage i = instance[_index];\\n        require(\\n            i.partiesArray[i.claimer] == msg.sender,\\n            \\\"Sender must be a claimer\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice checks whether or not a party has already voted\\n    modifier onlyNoVotes(uint256 _index) {\\n        CartesiComputeCtx storage i = instance[_index];\\n        require(\\n            !i.parties[msg.sender].hasVoted,\\n            \\\"Sender has already voted\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x7587be6d1eaee93ef72e1f72ba642320b922b4b29b559993dabed9894d4df8b4\",\"license\":\"Apache-2.0\"},\"cache/solpp-generated-contracts/CartesiComputeInterface.sol\":{\"content\":\"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n// SPDX-License-Identifier: Apache-2.0\\n//                                  Apache License\\n//                            Version 2.0, January 2004\\n//                         http://www.apache.org/licenses/\\n\\n//    TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\\n\\n//    1. Definitions.\\n\\n//       \\\"License\\\" shall mean the terms and conditions for use, reproduction,\\n//       and distribution as defined by Sections 1 through 9 of this document.\\n\\n//       \\\"Licensor\\\" shall mean the copyright owner or entity authorized by\\n//       the copyright owner that is granting the License.\\n\\n//       \\\"Legal Entity\\\" shall mean the union of the acting entity and all\\n//       other entities that control, are controlled by, or are under common\\n//       control with that entity. For the purposes of this definition,\\n//       \\\"control\\\" means (i) the power, direct or indirect, to cause the\\n//       direction or management of such entity, whether by contract or\\n//       otherwise, or (ii) ownership of fifty percent (50%) or more of the\\n//       outstanding shares, or (iii) beneficial ownership of such entity.\\n\\n//       \\\"You\\\" (or \\\"Your\\\") shall mean an individual or Legal Entity\\n//       exercising permissions granted by this License.\\n\\n//       \\\"Source\\\" form shall mean the preferred form for making modifications,\\n//       including but not limited to software source code, documentation\\n//       source, and configuration files.\\n\\n//       \\\"Object\\\" form shall mean any form resulting from mechanical\\n//       transformation or translation of a Source form, including but\\n//       not limited to compiled object code, generated documentation,\\n//       and conversions to other media types.\\n\\n//       \\\"Work\\\" shall mean the work of authorship, whether in Source or\\n//       Object form, made available under the License, as indicated by a\\n//       copyright notice that is included in or attached to the work\\n//       (an example is provided in the Appendix below).\\n\\n//       \\\"Derivative Works\\\" shall mean any work, whether in Source or Object\\n//       form, that is based on (or derived from) the Work and for which the\\n//       editorial revisions, annotations, elaborations, or other modifications\\n//       represent, as a whole, an original work of authorship. For the purposes\\n//       of this License, Derivative Works shall not include works that remain\\n//       separable from, or merely link (or bind by name) to the interfaces of,\\n//       the Work and Derivative Works thereof.\\n\\n//       \\\"Contribution\\\" shall mean any work of authorship, including\\n//       the original version of the Work and any modifications or additions\\n//       to that Work or Derivative Works thereof, that is intentionally\\n//       submitted to Licensor for inclusion in the Work by the copyright owner\\n//       or by an individual or Legal Entity authorized to submit on behalf of\\n//       the copyright owner. For the purposes of this definition, \\\"submitted\\\"\\n//       means any form of electronic, verbal, or written communication sent\\n//       to the Licensor or its representatives, including but not limited to\\n//       communication on electronic mailing lists, source code control systems,\\n//       and issue tracking systems that are managed by, or on behalf of, the\\n//       Licensor for the purpose of discussing and improving the Work, but\\n//       excluding communication that is conspicuously marked or otherwise\\n//       designated in writing by the copyright owner as \\\"Not a Contribution.\\\"\\n\\n//       \\\"Contributor\\\" shall mean Licensor and any individual or Legal Entity\\n//       on behalf of whom a Contribution has been received by Licensor and\\n//       subsequently incorporated within the Work.\\n\\n//    2. Grant of Copyright License. Subject to the terms and conditions of\\n//       this License, each Contributor hereby grants to You a perpetual,\\n//       worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n//       copyright license to reproduce, prepare Derivative Works of,\\n//       publicly display, publicly perform, sublicense, and distribute the\\n//       Work and such Derivative Works in Source or Object form.\\n\\n//    3. Grant of Patent License. Subject to the terms and conditions of\\n//       this License, each Contributor hereby grants to You a perpetual,\\n//       worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n//       (except as stated in this section) patent license to make, have made,\\n//       use, offer to sell, sell, import, and otherwise transfer the Work,\\n//       where such license applies only to those patent claims licensable\\n//       by such Contributor that are necessarily infringed by their\\n//       Contribution(s) alone or by combination of their Contribution(s)\\n//       with the Work to which such Contribution(s) was submitted. If You\\n//       institute patent litigation against any entity (including a\\n//       cross-claim or counterclaim in a lawsuit) alleging that the Work\\n//       or a Contribution incorporated within the Work constitutes direct\\n//       or contributory patent infringement, then any patent licenses\\n//       granted to You under this License for that Work shall terminate\\n//       as of the date such litigation is filed.\\n\\n//    4. Redistribution. You may reproduce and distribute copies of the\\n//       Work or Derivative Works thereof in any medium, with or without\\n//       modifications, and in Source or Object form, provided that You\\n//       meet the following conditions:\\n\\n//       (a) You must give any other recipients of the Work or\\n//           Derivative Works a copy of this License; and\\n\\n//       (b) You must cause any modified files to carry prominent notices\\n//           stating that You changed the files; and\\n\\n//       (c) You must retain, in the Source form of any Derivative Works\\n//           that You distribute, all copyright, patent, trademark, and\\n//           attribution notices from the Source form of the Work,\\n//           excluding those notices that do not pertain to any part of\\n//           the Derivative Works; and\\n\\n//       (d) If the Work includes a \\\"NOTICE\\\" text file as part of its\\n//           distribution, then any Derivative Works that You distribute must\\n//           include a readable copy of the attribution notices contained\\n//           within such NOTICE file, excluding those notices that do not\\n//           pertain to any part of the Derivative Works, in at least one\\n//           of the following places: within a NOTICE text file distributed\\n//           as part of the Derivative Works; within the Source form or\\n//           documentation, if provided along with the Derivative Works; or,\\n//           within a display generated by the Derivative Works, if and\\n//           wherever such third-party notices normally appear. The contents\\n//           of the NOTICE file are for informational purposes only and\\n//           do not modify the License. You may add Your own attribution\\n//           notices within Derivative Works that You distribute, alongside\\n//           or as an addendum to the NOTICE text from the Work, provided\\n//           that such additional attribution notices cannot be construed\\n//           as modifying the License.\\n\\n//       You may add Your own copyright statement to Your modifications and\\n//       may provide additional or different license terms and conditions\\n//       for use, reproduction, or distribution of Your modifications, or\\n//       for any such Derivative Works as a whole, provided Your use,\\n//       reproduction, and distribution of the Work otherwise complies with\\n//       the conditions stated in this License.\\n\\n//    5. Submission of Contributions. Unless You explicitly state otherwise,\\n//       any Contribution intentionally submitted for inclusion in the Work\\n//       by You to the Licensor shall be under the terms and conditions of\\n//       this License, without any additional terms or conditions.\\n//       Notwithstanding the above, nothing herein shall supersede or modify\\n//       the terms of any separate license agreement you may have executed\\n//       with Licensor regarding such Contributions.\\n\\n//    6. Trademarks. This License does not grant permission to use the trade\\n//       names, trademarks, service marks, or product names of the Licensor,\\n//       except as required for reasonable and customary use in describing the\\n//       origin of the Work and reproducing the content of the NOTICE file.\\n\\n//    7. Disclaimer of Warranty. Unless required by applicable law or\\n//       agreed to in writing, Licensor provides the Work (and each\\n//       Contributor provides its Contributions) on an \\\"AS IS\\\" BASIS,\\n//       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\\n//       implied, including, without limitation, any warranties or conditions\\n//       of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\\n//       PARTICULAR PURPOSE. You are solely responsible for determining the\\n//       appropriateness of using or redistributing the Work and assume any\\n//       risks associated with Your exercise of permissions under this License.\\n\\n//    8. Limitation of Liability. In no event and under no legal theory,\\n//       whether in tort (including negligence), contract, or otherwise,\\n//       unless required by applicable law (such as deliberate and grossly\\n//       negligent acts) or agreed to in writing, shall any Contributor be\\n//       liable to You for damages, including any direct, indirect, special,\\n//       incidental, or consequential damages of any character arising as a\\n//       result of this License or out of the use or inability to use the\\n//       Work (including but not limited to damages for loss of goodwill,\\n//       work stoppage, computer failure or malfunction, or any and all\\n//       other commercial damages or losses), even if such Contributor\\n//       has been advised of the possibility of such damages.\\n\\n//    9. Accepting Warranty or Additional Liability. While redistributing\\n//       the Work or Derivative Works thereof, You may choose to offer,\\n//       and charge a fee for, acceptance of support, warranty, indemnity,\\n//       or other liability obligations and/or rights consistent with this\\n//       License. However, in accepting such obligations, You may act only\\n//       on Your own behalf and on Your sole responsibility, not on behalf\\n//       of any other Contributor, and only if You agree to indemnify,\\n//       defend, and hold each Contributor harmless for any liability\\n//       incurred by, or claims asserted against, such Contributor by reason\\n//       of your accepting any such warranty or additional liability.\\n\\n//    END OF TERMS AND CONDITIONS\\n\\n//    Copyright (C) 2020 Cartesi Pte. Ltd.\\n\\n//    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n//    you may not use this file except in compliance with the License.\\n//    You may obtain a copy of the License at\\n\\n//        http://www.apache.org/licenses/LICENSE-2.0\\n\\n//    Unless required by applicable law or agreed to in writing, software\\n//    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n//    See the License for the specific language governing permissions and\\n//    limitations under the License.\\n\\n/// @title CartesiComputeInterface\\n/// @author Stephen Chen\\n\\n\\n\\nimport \\\"@cartesi/util/contracts/Instantiator.sol\\\";\\n\\ninterface CartesiComputeInterface is Instantiator {\\n    enum State {\\n        WaitingProviders,\\n        ProviderMissedDeadline,\\n        WaitingChallengeDrives,\\n        WaitingReveals,\\n        WaitingClaim,\\n        ClaimerMissedDeadline,\\n        WaitingConfirmationDeadline, // \\\"Voting Phase\\\"\\n        WaitingChallengeResult, // \\\"Voting Phase\\\"\\n        ChallengerWon,\\n        ClaimerWon,\\n        ConsensusResult\\n    }\\n\\n    /*\\n    There are two types of drive, one is directDrive, and the other is loggerDrive.\\n    directDrive has content inserted to the directValue field with up to 1MB;\\n    loggerDrive has content submitted to the logger contract,\\n    which can be retrieved with driveLog2Size and loggerRootHash.\\n    The needsLogger field is set to true for loggerDrive, false for directDrive.\\n\\n    The waitsProvider field is set to true meaning the drive is not ready,\\n    and needs to be filled during the WaitingProviders phase.\\n    The provider field is the user who is responsible for filling out the drive.\\n    I.e the directValue of directDrive, or the loggerRootHash of loggerDrive\\n    */\\n    struct Drive {\\n        // start position of the drive\\n        uint64 position;\\n        // log2 size of the drive in the unit of bytes\\n        uint8 driveLog2Size;\\n        // direct value inserted to the drive\\n        bytes directValue;\\n        // ipfs object path of the logger drive\\n        bytes loggerIpfsPath;\\n        // root hash of the drive submitted to the logger\\n        bytes32 loggerRootHash;\\n        // the user who's responsible for filling out the drive\\n        address provider;\\n        // indicates the drive needs to wait for the provider to provide content\\n        bool waitsProvider;\\n        // indicates the content of the drive must be retrieved from logger\\n        bool needsLogger;\\n        // use CAR file for download\\n        bool downloadAsCAR;\\n    }\\n\\n    struct Party {\\n        bool isParty;\\n        bool hasVoted;\\n        bool hasCheated;\\n        uint64 arrayIdx;\\n    }\\n\\n    /// @notice Instantiate a Cartesi Compute SDK instance.\\n    /// @param _finalTime max cycle of the machine for that computation\\n    /// @param _templateHash hash of the machine with all drives empty\\n    /// @param _outputPosition position of the output drive\\n    /// @param _roundDuration duration of the round (security param)\\n    /// @param _inputDrives an array of drive which assemble the machine\\n    /// @return uint256, CartesiCompute index\\n    function instantiate(\\n        uint256 _finalTime,\\n        bytes32 _templateHash,\\n        uint64 _outputPosition,\\n        uint8 _outputLog2Size,\\n        uint256 _roundDuration,\\n        address[] memory parties,\\n        Drive[] memory _inputDrives,\\n        bool _noChallengeDrive\\n    ) external returns (uint256);\\n\\n    /// @notice Get result of a finished instance.\\n    /// @param _index index of Cartesi Compute instance to get result\\n    /// @return bool, indicates the result is ready\\n    /// @return bool, indicates the sdk is still running\\n    /// @return address, the user to blame for the abnormal stop of the sdk\\n    /// @return bytes32, the result of the sdk if available\\n    function getResult(uint256 _index)\\n        external\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            address,\\n            bytes memory\\n        );\\n\\n    /// @notice Deactivate a Cartesi Compute SDK instance.\\n    /// @param _index index of Cartesi Compute instance to deactivate\\n    function destruct(uint256 _index) external;\\n}\\n\",\"keccak256\":\"0x3f306980d9150a94073eb279837233656dc99ad66f365993f89bf2b814485907\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x6080604052600080553480156200001557600080fd5b506040516200608338038062006083833981016040819052620000389162000099565b600380546001600160a01b03199081166001600160a01b039384161790915560058054821693831693909317909255600480549092169216919091179055620000e2565b80516001600160a01b03811681146200009457600080fd5b919050565b600080600060608486031215620000ae578283fd5b620000b9846200007c565b9250620000c9602085016200007c565b9150620000d9604085016200007c565b90509250925092565b615f9180620000f26000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c8063ab82d9a0116100ad578063c70683ca11610071578063c70683ca146102a8578063c87e3ae9146102bb578063ded4df63146102ce578063f9bc3b21146102e1578063fa0ecc5b146102f45761012c565b8063ab82d9a01461023b578063b72971ee1461024e578063ba0179b514610261578063bfda2e7214610274578063c526656c146102875761012c565b80635748c130116100f45780635748c130146101aa57806373df1612146101bd57806382afd23b146101e3578063995e4339146101f6578063ab5da187146102195761012c565b806301ff62ab1461013157806326987b601461015a578063351e66571461016f5780633d46b819146101845780634c6fe7bf14610197575b600080fd5b61014461013f366004614dc7565b610307565b6040516101519190615438565b60405180910390f35b61016261037f565b604051610151919061549b565b61018261017d366004614e13565b610385565b005b610162610192366004614daf565b610a7e565b6101826101a5366004614daf565b610b28565b6101626101b8366004614daf565b610d0c565b6101d06101cb366004614dc7565b610fa3565b6040516101519796959493929190615393565b6101446101f1366004614daf565b6119e8565b610209610204366004614daf565b611a00565b6040516101519493929190615443565b61022c610227366004614dc7565b611df6565b60405161015193929190615481565b610182610249366004614daf565b611e86565b61016261025c366004614efb565b6121ac565b61018261026f366004614daf565b6129ee565b610182610282366004614daf565b612c70565b61029a610295366004614dc7565b612dc5565b604051610151929190615352565b6101826102b6366004614df2565b612efe565b6101826102c9366004614daf565b6133ed565b6101826102dc366004614daf565b6135df565b6101826102ef366004614daf565b613a9c565b61018261030236600461500d565b613e7f565b600082806000541161034e576040805162461bcd60e51b81526020600482015260166024820152600080516020615f3c833981519152604482015290519081900360640190fd5b505060009182526006602090815260408084206001600160a01b03939093168452600f909201905290205460ff1690565b60005481565b8480600054116103ca576040805162461bcd60e51b81526020600482015260166024820152600080516020615f3c833981519152604482015290519081900360640190fd5b6103d3816119e8565b610415576040805162461bcd60e51b815260206004820152600e60248201526d496e64657820696e61637469766560901b604482015290519081900360640190fd5b6000868152600660205260409020600e810154600c820180548993923392916001600160401b0390911690811061044857fe5b6000918252602090912001546001600160a01b0316146104835760405162461bcd60e51b815260040161047a90615c84565b60405180910390fd5b6000888152600260209081526040808320805460010190556006909152812089916104ad836144c2565b600683015401421190506004601083015460ff16600a8111156104cc57fe5b14806104f257506002601083015460ff16600a8111156104e857fe5b1480156104f25750805b61050e5760405162461bcd60e51b815260040161047a90615632565b88516014830154146105325760405162461bcd60e51b815260040161047a906156a0565b60048201548851600160401b90910460ff1660020a146105645760405162461bcd60e51b815260040161047a90615b31565b606061056f896147dc565b6004848101546040516310561d5760e31b81529293508d9273D47860593fe40b3D0E04460e54bFE0b84E1E69229263d7304dd9926001600160401b03811692600160401b90910460ff169185916382b0eab8916105ce918a9101615380565b60206040518083038186803b1580156105e657600080fd5b505af41580156105fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061e9190614d97565b8d6040518563ffffffff1660e01b815260040161063e9493929190615e56565b60206040518083038186803b15801561065657600080fd5b505af415801561066a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068e9190614d97565b146106ab5760405162461bcd60e51b815260040161047a906159f4565b601483015460005b8181101561099c5760608c82815181106106c957fe5b60200260200101519050856009015473D47860593fe40b3D0E04460e54bFE0b84E1E692263d7304dd988601401858154811061070157fe5b600091825260209091206005909102015460148a0180546001600160401b03909216918790811061072e57fe5b906000526020600020906005020160000160089054906101000a900460ff1673D47860593fe40b3D0E04460e54bFE0b84E1E692263a73426888c601401898154811061077657fe5b600091825260209091206005909102015460405160e083901b6001600160e01b03191681526107b291600160401b900460ff1690600401615e87565b60206040518083038186803b1580156107ca57600080fd5b505af41580156107de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108029190614d97565b866040518563ffffffff1660e01b81526004016108229493929190615e56565b60206040518083038186803b15801561083a57600080fd5b505af415801561084e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108729190614d97565b1461088f5760405162461bcd60e51b815260040161047a9061557e565b73D47860593fe40b3D0E04460e54bFE0b84E1E692263d7304dd98760140184815481106108b857fe5b60009182526020909120600590910201546014890180546001600160401b0390921691869081106108e557fe5b906000526020600020906005020160000160089054906101000a900460ff1689601301868154811061091357fe5b9060005260206000200154856040518563ffffffff1660e01b815260040161093e9493929190615e56565b60206040518083038186803b15801561095657600080fd5b505af415801561096a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098e9190614d97565b6009870155506001016106b3565b50600a84018c905560108401805460ff1916600617905589516109c890600b86019060208d01906148f3565b50600e840154600c85018054600192600f88019260009290916001600160401b03169081106109f357fe5b60009182526020808320909101546001600160a01b03168352820192909252604090810190912080549215156101000261ff001990931692909217909155426006860155517f1e9358f673ff367487ce56f136412ae5b69bf2c06e223aad2756d748c2a9b52a90610a67908f908f90615d4e565b60405180910390a150505050505050505050505050565b6000818060005411610ac5576040805162461bcd60e51b81526020600482015260166024820152600080516020615f3c833981519152604482015290519081900360640190fd5b610ace816119e8565b610b10576040805162461bcd60e51b815260206004820152600e60248201526d496e64657820696e61637469766560901b604482015290519081900360640190fd5b60008381526002602052604090205491505b50919050565b808060005411610b6d576040805162461bcd60e51b81526020600482015260166024820152600080516020615f3c833981519152604482015290519081900360640190fd5b610b76816119e8565b610bb8576040805162461bcd60e51b815260206004820152600e60248201526d496e64657820696e61637469766560901b604482015290519081900360640190fd5b600082815260066020526040812090610bd0846144c2565b8260060154014211905080610bf75760405162461bcd60e51b815260040161047a90615a26565b6000601083015460ff16600a811115610c0c57fe5b1415610c5e576010820180546001919060ff191682805b0217905550600080516020615f1c83398151915284610c4186610d0c565b604051610c4f929190615d4e565b60405180910390a15050610d08565b6003601083015460ff16600a811115610c7357fe5b1415610c8e576010820180546001919060ff19168280610c23565b6004601083015460ff16600a811115610ca357fe5b1415610cbf576010820180546005919060ff1916600183610c23565b6006601083015460ff16600a811115610cd457fe5b1415610cf057601082018054600a919060ff1916600183610c23565b60405162461bcd60e51b815260040161047a90615927565b5050565b6000818060005411610d53576040805162461bcd60e51b81526020600482015260166024820152600080516020615f3c833981519152604482015290519081900360640190fd5b60008381526006602052604081206010015460ff169081600a811115610d7557fe5b1415610d97576f57616974696e6750726f76696465727360801b925050610b22565b600381600a811115610da557fe5b1415610dc5576d57616974696e6752657665616c7360901b925050610b22565b600281600a811115610dd357fe5b1415610dfb577557616974696e674368616c6c656e676544726976657360501b925050610b22565b600581600a811115610e0957fe5b1415610e305774436c61696d65724d6973736564446561646c696e6560581b925050610b22565b600181600a811115610e3e57fe5b1415610e66577550726f76696465724d6973736564446561646c696e6560501b925050610b22565b600481600a811115610e7457fe5b1415610e92576b57616974696e67436c61696d60a01b925050610b22565b600681600a811115610ea057fe5b1415610ecf577f57616974696e67436f6e6669726d6174696f6e446561646c696e650000000000925050610b22565b600781600a811115610edd57fe5b1415610f05577515d85a5d1a5b99d0da185b1b195b99d954995cdd5b1d60521b925050610b22565b600a81600a811115610f1357fe5b1415610f34576e10dbdb9cd95b9cdd5cd4995cdd5b1d608a1b925050610b22565b600881600a811115610f4257fe5b1415610f61576c21b430b63632b733b2b92bb7b760991b925050610b22565b600981600a811115610f6f57fe5b1415610f8b576921b630b4b6b2b92bb7b760b11b925050610b22565b60405162461bcd60e51b815260040161047a9061595e565b6060806060806060610fb361497f565b6000888060005411610ffa576040805162461bcd60e51b81526020600482015260166024820152600080516020615f3c833981519152604482015290519081900360640190fd5b60008a81526006602090815260408083206001600160a01b038d168452600f8101835292819020815160808082018452915460ff808216151583526101008204811615158387015262010000820416151582850152630100000090046001600160401b03166060808301919091528351600480825260a0820190955291985093909291908301908036833701905050905081600301548160008151811061109d57fe5b6020026020010181815250506110b28c6144c2565b826006015401816001815181106110c557fe5b6020908102919091010152600482015481516001600160401b0390911690829060029081106110f057fe5b6020026020010181815250508160040160089054906101000a900460ff1660ff168160038151811061111e57fe5b6020908102919091010152604080516002808252606082810190935281602001602082028036833701905050600e840154909150600160401b90046001600160401b0316156111cf57600e830154600c840180549091600160401b90046001600160401b031690811061118d57fe5b600091825260208220015482516001600160a01b039091169183916111ae57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b600e830154600c8401805490916001600160401b03169081106111ee57fe5b9060005260206000200160009054906101000a90046001600160a01b03168160018151811061121957fe5b6001600160a01b039290921660209283029190910182015260408051600480825260a08201909252606092909190820160808036833701905050905083600801548160008151811061126757fe5b60200260200101818152505083600901548160018151811061128557fe5b60200260200101818152505083600a0154816002815181106112a357fe5b6020026020010181815250506112b88e610d0c565b816003815181106112c557fe5b60209081029190910101526000601085015460ff16600a8111156112e557fe5b14156115ea57604080516001808252818301909252606091816020015b61130a6149a6565b815260200190600190039081611302579050509050846014018560120186600201548154811061133657fe5b90600052602060002001548154811061134b57fe5b6000918252602091829020604080516101208101825260059390930290910180546001600160401b0381168452600160401b900460ff1683850152600180820180548451600261010094831615949094026000190190911692909204601f81018790048702830187018552808352949592949386019391929091908301828280156114175780601f106113ec57610100808354040283529160200191611417565b820191906000526020600020905b8154815290600101906020018083116113fa57829003601f168201915b5050509183525050600282810180546040805160206001841615610100026000190190931694909404601f810183900483028501830190915280845293810193908301828280156114a95780601f1061147e576101008083540402835291602001916114a9565b820191906000526020600020905b81548152906001019060200180831161148c57829003601f168201915b5050509183525050600382015460208201526004909101546001600160a01b038116604083015260ff600160a01b8204811615156060840152600160a81b8204811615156080840152600160b01b90910416151560a0909101528151829060009061151057fe5b602002602001018190525083838387600b01848c8a60150160009054906101000a900460ff16838054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115cb5780601f106115a0576101008083540402835291602001916115cb565b820191906000526020600020905b8154815290600101906020018083116115ae57829003601f168201915b505050505093509c509c509c509c509c509c509c5050505050506119db565b6003601085015460ff16600a8111156115ff57fe5b141561165057604080516001808252818301909252606091816020015b6116246149a6565b81526020019060019003908161161c579050509050846014018560110186600101548154811061133657fe5b6001601085015460ff16600a81111561166557fe5b1415611726576040805160008082526020820190925260609161169e565b61168b6149a6565b8152602001906001900390816116835790505b50905083838387600b01848c8a60150160009054906101000a900460ff16838054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115cb5780601f106115a0576101008083540402835291602001916115cb565b6015840154600b8501805460408051602060026101006001861615026000190190941693909304601f8101849004840282018401909252818152879487948794909360148c01938f9360ff1692909186918301828280156117c85780601f1061179d576101008083540402835291602001916117c8565b820191906000526020600020905b8154815290600101906020018083116117ab57829003601f168201915b5050505050935082805480602002602001604051908101604052809291908181526020016000905b828210156119c257600084815260209081902060408051610120810182526005860290920180546001600160401b0381168452600160401b900460ff1683850152600180820180548451600261010094831615949094026000190190911692909204601f81018790048702830187018552808352949592949386019391929091908301828280156118c25780601f10611897576101008083540402835291602001916118c2565b820191906000526020600020905b8154815290600101906020018083116118a557829003601f168201915b5050509183525050600282810180546040805160206001841615610100026000190190931694909404601f810183900483028501830190915280845293810193908301828280156119545780601f1061192957610100808354040283529160200191611954565b820191906000526020600020905b81548152906001019060200180831161193757829003601f168201915b505050918352505060038201546020808301919091526004909201546001600160a01b038116604083015260ff600160a01b8204811615156060840152600160a81b8204811615156080840152600160b01b90910416151560a09091015290825260019290920191016117f0565b5050505092509b509b509b509b509b509b509b50505050505b5092959891949750929550565b60008181526001602052604090205460ff165b919050565b60008060006060848060005411611a4c576040805162461bcd60e51b81526020600482015260166024820152600080516020615f3c833981519152604482015290519081900360640190fd5b6000868152600660205260409020600a601082015460ff16600a811115611a6f57fe5b1415611b2857600160008083600b01808054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611b135780601f10611ae857610100808354040283529160200191611b13565b820191906000526020600020905b815481529060010190602001808311611af657829003601f168201915b50505050509050955095509550955050611dee565b6000601082015460ff16600a811115611b3d57fe5b1480611b5b57506002601082015460ff16600a811115611b5957fe5b145b80611b7857506004601082015460ff16600a811115611b7657fe5b145b80611b9557506006601082015460ff16600a811115611b9357fe5b145b80611bb257506007601082015460ff16600a811115611bb057fe5b145b80611bcf57506003601082015460ff16600a811115611bcd57fe5b145b15611bf85760006001600060405180602001604052806000815250955095509550955050611dee565b6001601082015460ff16600a811115611c0d57fe5b1415611d1057600087815260066020526040812060128101546002909101541015611c82578160140182601201836002015481548110611c4957fe5b906000526020600020015481548110611c5e57fe5b60009182526020909120600460059092020101546001600160a01b03169050611ced565b600088815260066020526040902060118101546001909101541015611ced578160140182601101836001015481548110611cb857fe5b906000526020600020015481548110611ccd57fe5b60009182526020909120600460059092020101546001600160a01b031690505b600080826040518060200160405280600081525096509650965096505050611dee565b6005601082015460ff16600a811115611d2557fe5b1480611d4357506008601082015460ff16600a811115611d4157fe5b145b15611da157600e810154600c820180546000928392916001600160401b03909116908110611d6d57fe5b60009182526020808320909101546040805192830190529181529298509096506001600160a01b031694509250611dee9050565b6009601082015460ff16600a811115611db657fe5b1415610f8b5760008082600c0183600e0160089054906101000a90046001600160401b03166001600160401b031681548110611d6d57fe5b509193509193565b6000806000848060005411611e40576040805162461bcd60e51b81526020600482015260166024820152600080516020615f3c833981519152604482015290519081900360640190fd5b5050506000928352506006602090815260408084206001600160a01b039093168452600f909201905290205460ff80821692610100830482169262010000900490911690565b808060005411611ecb576040805162461bcd60e51b81526020600482015260166024820152600080516020615f3c833981519152604482015290519081900360640190fd5b611ed4816119e8565b611f16576040805162461bcd60e51b815260206004820152600e60248201526d496e64657820696e61637469766560901b604482015290519081900360640190fd5b6000828152600660209081526040808320338452600f81019092529091205483919060ff16611f575760405162461bcd60e51b815260040161047a90615aba565b6000848152600660209081526040808320338452600f810190925290912054859190610100900460ff1615611f9e5760405162461bcd60e51b815260040161047a90615a51565b6000868152600260209081526040808320805460010190556006918290529091208791601082015460ff16600a811115611fd457fe5b14611ff15760405162461bcd60e51b815260040161047a906154b5565b600554600e820154600c830180546001600160a01b03909316926320b73870923392916001600160401b0390911690811061202857fe5b6000918252602090912001546005850154600380546009880154600a890154928901546040516001600160e01b031960e08a901b16815261207e97966001600160a01b039081169695941693919060040161530e565b602060405180830381600087803b15801561209857600080fd5b505af11580156120ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d09190614d97565b60078083019190915560108201805460ff19166001830217905550336000908152600f8201602052604090819020805461ff0019166101001790819055600e83018054600160801b600160401b6001600160401b03630100000090950485160267ffffffffffffffff60401b199092169190911781810484166001019093160267ffffffffffffffff60801b19909216919091179055426006830155517fa895da4b794aeba8d8082db237265459db7b7ffdb5aa7c2332a7c5eafbfae7359061219a908a9061549b565b60405180910390a15050505050505050565b600060328510156121cf5760405162461bcd60e51b815260040161047a906155f0565b600080548152600660205260408120905b8551816001600160401b031610156123795781600f01600087836001600160401b03168151811061220d57fe5b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16156122515760405162461bcd60e51b815260040161047a90615547565b600182600f01600088846001600160401b03168151811061226e57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060000160006101000a81548160ff0219169083151502179055508082600f01600088846001600160401b0316815181106122cc57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060000160036101000a8154816001600160401b0302191690836001600160401b0316021790555081600c0186826001600160401b03168151811061233457fe5b60209081029190910181015182546001808201855560009485529290932090920180546001600160a01b0319166001600160a01b0390931692909217909155016121e0565b508351600090806001600160401b038111801561239557600080fd5b506040519080825280602002602001820160405280156123bf578160200160208202803683370190505b5080516123d69160138601916020909101906149f4565b5060158301805460ff191686151517905560005b81811015612887576123fa6149a6565b87828151811061240657fe5b602002602001015190508060e001516125e6576003816020015160ff1610156124415760405162461bcd60e51b815260040161047a90615aea565b8060c001516125c357806020015160ff1660020a81604001515111156124795760405162461bcd60e51b815260040161047a90615ceb565b60408101516020820151815160ff90911660020a111561250a5760408201518051602084015160ff1660020a036001600160401b03811180156124bb57600080fd5b506040519080825280601f01601f1916602001820160405280156124e6576020820181803683370190505b506040516020016124f89291906152df565b60405160208183030381529060405290505b6060612515826147dc565b6040516310561d5760e31b815290915073D47860593fe40b3D0E04460e54bFE0b84E1E6922906382b0eab89061254f908490600401615380565b60206040518083038186803b15801561256757600080fd5b505af415801561257b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259f9190614d97565b8760130185815481106125ae57fe5b906000526020600020018190555050506125e1565b60128501805460018181018355600092835260209092200183905593505b6126f7565b8060c001516126d957806080015185601301838154811061260357fe5b6000918252602091829020019190915560048054608084015192840151604051632b6baa3760e21b81526001600160a01b039092169363adaea8dc9361264c93919291016154a4565b60206040518083038186803b15801561266457600080fd5b505afa158015612678573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061269c9190614d74565b1580156126b5575060a08101516001600160a01b031615155b156125e15760118501805460018101825560009182526020909120018290556126f7565b60128501805460018181018355600092835260209092200183905593505b604080516101208101825282516001600160401b03908116825260208085015160ff90811682850190815286860151958501958652606080880151908601526080808801519086015260a0808801516001600160a01b03169086015260c08088015115159086015260e0808801511515908601526101008088015115159086015260148b0180546001808201835560009283529185902087516005909202018054935167ffffffffffffffff19909416919096161760ff60401b1916600160401b929093169190910291909117835593518051939492936127df9385019291909101906148f3565b50606082015180516127fb9160028401916020909101906148f3565b506080820151600382015560a08201516004909101805460c084015160e0850151610100909501511515600160b01b0260ff60b01b19951515600160a81b0260ff60a81b19921515600160a01b0260ff60a01b196001600160a01b039097166001600160a01b0319909516949094179590951692909217169290921792909216179055506001016123ea565b5060038960ff1610156128ac5760405162461bcd60e51b815260040161047a90615774565b8254336001600160a01b0319909116178355600e83018054600160801b67ffffffffffffffff60801b19909116179055600383018c9055600883018b9055600983018b905560048301805467ffffffffffffffff19166001600160401b038c161760ff60401b1916600160401b60ff8c1602179055600583018890554260068401558115612950576010830180546000919060ff19166001835b0217905550612980565b601183015415612970576010830180546002919060ff1916600183612946565b60108301805460ff191660041790555b7f74f4614e097fc158c85ea12787f9e678e96166b4f523416bdb792747c47f1bac6000546040516129b1919061549b565b60405180910390a150506000805481526001602081905260408220805460ff19168217905581549081019091559150505b98975050505050505050565b808060005411612a33576040805162461bcd60e51b81526020600482015260166024820152600080516020615f3c833981519152604482015290519081900360640190fd5b612a3c816119e8565b612a7e576040805162461bcd60e51b815260206004820152600e60248201526d496e64657820696e61637469766560901b604482015290519081900360640190fd5b6000828152600660209081526040808320338452600f81019092529091205483919060ff16612abf5760405162461bcd60e51b815260040161047a90615aba565b6000848152600660209081526040808320338452600f810190925290912054859190610100900460ff1615612b065760405162461bcd60e51b815260040161047a90615a51565b6000868152600260209081526040808320805460010190556006918290529091208791601082015460ff16600a811115612b3c57fe5b14612b595760405162461bcd60e51b815260040161047a906154b5565b600d81018054600181810183556000928352602080842090920180546001600160a01b03191633908117909155808452600f8501909252604092839020805461ff001916610100179055600e840180546001600160401b03600160801b80830482169094011690920267ffffffffffffffff60801b1990921691909117905590517f6f220d98c15dbd07fdc24781b682ea34f92411fc61b83c761dd927afbe02d3fd91612c08918b9190615d37565b60405180910390a1600c810154600e820154600160801b90046001600160401b03161415612c665760108101805460ff1916600a179055600080516020615f1c83398151915288612c5881610d0c565b60405161219a929190615d4e565b5050505050505050565b808060005411612cb5576040805162461bcd60e51b81526020600482015260166024820152600080516020615f3c833981519152604482015290519081900360640190fd5b612cbe816119e8565b612d00576040805162461bcd60e51b815260206004820152600e60248201526d496e64657820696e61637469766560901b604482015290519081900360640190fd5b60008281526002602090815260408083208054600101905560069091529020601581015483919060ff1615612d475760405162461bcd60e51b815260040161047a90615cb6565b6002601082015460ff16600a811115612d5c57fe5b14612d795760405162461bcd60e51b815260040161047a90615834565b336000908152600f8201602052604090205460ff16612daa5760405162461bcd60e51b815260040161047a90615ba9565b60108101805460ff1916600317905542600690910155505050565b606080838060005411612e0d576040805162461bcd60e51b81526020600482015260166024820152600080516020615f3c833981519152604482015290519081900360640190fd5b606080600760008881526006602052604090206010015460ff16600a811115612e3257fe5b1415612ed85760408051600180825281830190925290602080830190803683375050604080516001808252818301909252929450905060208083019080368337505060055484519293506001600160a01b031691849150600090612e9257fe5b6001600160a01b03909216602092830291909101820152600088815260069091526040812060070154825190918391612ec757fe5b602002602001018181525050612ef2565b505060408051600080825260208201908152818301909252905b90969095509350505050565b818060005411612f43576040805162461bcd60e51b81526020600482015260166024820152600080516020615f3c833981519152604482015290519081900360640190fd5b612f4c816119e8565b612f8e576040805162461bcd60e51b815260206004820152600e60248201526d496e64657820696e61637469766560901b604482015290519081900360640190fd5b60008381526006602052604081208491601082015460ff16600a811115612fb157fe5b14612fce5760405162461bcd60e51b815260040161047a9061598a565b6012810154600282015410612ff55760405162461bcd60e51b815260040161047a906159bd565b60008160120182600201548154811061300a57fe5b906000526020600020015490508160140180549050811061303d5760405162461bcd60e51b815260040161047a9061587a565b6130456149a6565b82601401828154811061305457fe5b6000918252602091829020604080516101208101825260059390930290910180546001600160401b0381168452600160401b900460ff1683850152600180820180548451600261010094831615949094026000190190911692909204601f81018790048702830187018552808352949592949386019391929091908301828280156131205780601f106130f557610100808354040283529160200191613120565b820191906000526020600020905b81548152906001019060200180831161310357829003601f168201915b5050509183525050600282810180546040805160206001841615610100026000190190931694909404601f810183900483028501830190915280845293810193908301828280156131b25780601f10613187576101008083540402835291602001916131b2565b820191906000526020600020905b81548152906001019060200180831161319557829003601f168201915b5050509183525050600382015460208201526004909101546001600160a01b038116604083015260ff600160a01b8204811615156060840152600160a81b8204811615156080840152600160b01b90910416151560a0909101526013840180549192506000918490811061322257fe5b90600052602060002001541461324a5760405162461bcd60e51b815260040161047a906157bc565b8060c0015161326b5760405162461bcd60e51b815260040161047a90615c1c565b60a08101516001600160a01b031633146132975760405162461bcd60e51b815260040161047a90615b7d565b6000878152600660205260408120600281015460128201805492939290919081106132be57fe5b9060005260206000200154905060008260140182815481106132dc57fe5b906000526020600020906005020190508060040160159054906101000a900460ff1661331a5760405162461bcd60e51b815260040161047a906157f3565b600381018990556013830180548a91908490811061333457fe5b600091825260209091200155600283018054600101908190554260068501556012840154141561338c5760118301541561337c5760108301805460ff1916600217905561338c565b60108301805460ff191660041790555b7fcf09a543fdbd213491ac20efabb93fbbc4be4dabb386c479dc6356050ed37c3e8a8460140184815481106133bd57fe5b90600052602060002090600502016040516133d9929190615d5c565b60405180910390a150505050505050505050565b808060005411613432576040805162461bcd60e51b81526020600482015260166024820152600080516020615f3c833981519152604482015290519081900360640190fd5b61343b816119e8565b61347d576040805162461bcd60e51b815260206004820152600e60248201526d496e64657820696e61637469766560901b604482015290519081900360640190fd5b6000828152600660205260409020546001600160a01b03163381146134e4576040805162461bcd60e51b815260206004820152601860248201527721b0b73737ba1031329031b0b63632b210313c903ab9b2b960411b604482015290519081900360640190fd5b60008381526006602052604090206001601082015460ff16600a81111561350757fe5b148061352557506005601082015460ff16600a81111561352357fe5b145b806135425750600a601082015460ff16600a81111561354057fe5b145b8061355f57506008601082015460ff16600a81111561355d57fe5b145b8061357c57506009601082015460ff16600a81111561357a57fe5b145b6135985760405162461bcd60e51b815260040161047a906158de565b6135a6601182016000614a2e565b6135b4601282016000614a2e565b6135c2601382016000614a2e565b6135d0601482016000614a4f565b6135d9846148d0565b50505050565b808060005411613624576040805162461bcd60e51b81526020600482015260166024820152600080516020615f3c833981519152604482015290519081900360640190fd5b61362d816119e8565b61366f576040805162461bcd60e51b815260206004820152600e60248201526d496e64657820696e61637469766560901b604482015290519081900360640190fd5b6000828152600260209081526040808320805460010190556006909152902082906007601082015460ff16600a8111156136a557fe5b146136c25760405162461bcd60e51b815260040161047a90615725565b426006820155600781015460055460405163b6b5c31960e01b81526001600160a01b039091169063b6b5c319906136fd90849060040161549b565b60206040518083038186803b15801561371557600080fd5b505afa158015613729573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061374d9190614d74565b1561392357600e820154600c83018054600192600f86019260009290916001600160401b031690811061377c57fe5b60009182526020808320909101546001600160a01b0316835282019290925260400181208054921515620100000262ff000019909316929092179091555b600d83015481101561381f57600083600f01600085600d0184815481106137dd57fe5b60009182526020808320909101546001600160a01b03168352820192909252604001902080549115156101000261ff00199092169190911790556001016137ba565b50600d82018054600e840180546001600160401b03600160801b8083048216949094031690920267ffffffffffffffff60801b19909216919091179055613867906000614a2e565b600c820154600e830154600160801b90046001600160401b031614156138d4576010820180546008919060ff19166001835b0217905550600080516020615f1c833981519152856138b787610d0c565b6040516138c5929190615d4e565b60405180910390a15050613a97565b6010820180546004919060ff1916600183021790555050600e018054600160401b81046001600160401b031667ffffffffffffffff199091161767ffffffffffffffff60401b19169055613a97565b600554604051633664f8bf60e11b81526001600160a01b0390911690636cc9f17e9061395390849060040161549b565b60206040518083038186803b15801561396b57600080fd5b505afa15801561397f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139a39190614d74565b15613a7c57600182600f01600084600c0185600e0160089054906101000a90046001600160401b03166001600160401b0316815481106139df57fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190208054911515620100000262ff000019909216919091179055600c820154600e8301546001600160401b03600160801b909104161415613a52576010820180546009919060ff1916600183613899565b5060108101805460ff19166006179055600e01805467ffffffffffffffff60401b19169055613a97565b60405162461bcd60e51b815260040161047a90615bf0565b50505b505050565b808060005411613ae1576040805162461bcd60e51b81526020600482015260166024820152600080516020615f3c833981519152604482015290519081900360640190fd5b613aea816119e8565b613b2c576040805162461bcd60e51b815260206004820152600e60248201526d496e64657820696e61637469766560901b604482015290519081900360640190fd5b60008281526006602052604090206003601082015460ff16600a811115613b4f57fe5b14613b6c5760405162461bcd60e51b815260040161047a90615c53565b600081601101826001015481548110613b8157fe5b9060005260206000200154905081601401805490508110613bb45760405162461bcd60e51b815260040161047a906156f9565b613bbc6149a6565b826014018281548110613bcb57fe5b6000918252602091829020604080516101208101825260059390930290910180546001600160401b0381168452600160401b900460ff1683850152600180820180548451600261010094831615949094026000190190911692909204601f8101879004870283018701855280835294959294938601939192909190830182828015613c975780601f10613c6c57610100808354040283529160200191613c97565b820191906000526020600020905b815481529060010190602001808311613c7a57829003601f168201915b5050509183525050600282810180546040805160206001841615610100026000190190931694909404601f81018390048302850183019091528084529381019390830182828015613d295780601f10613cfe57610100808354040283529160200191613d29565b820191906000526020600020905b815481529060010190602001808311613d0c57829003601f168201915b5050509183525050600382015460208201526004909101546001600160a01b038116604083015260ff600160a01b8204811615156060840152600160a81b8204811615156080840152600160b01b90910416151560a09091015260e0810151909150613da75760405162461bcd60e51b815260040161047a90615a83565b6004805460808301516020840151604051632b6baa3760e21b81526001600160a01b039093169363adaea8dc93613de0939291016154a4565b60206040518083038186803b158015613df857600080fd5b505afa158015613e0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e309190614d74565b613e4c5760405162461bcd60e51b815260040161047a906158a7565b600180840180549091019081905542600685015560118401541415613a94575050601001805460ff191660041790555050565b818060005411613ec4576040805162461bcd60e51b81526020600482015260166024820152600080516020615f3c833981519152604482015290519081900360640190fd5b613ecd816119e8565b613f0f576040805162461bcd60e51b815260206004820152600e60248201526d496e64657820696e61637469766560901b604482015290519081900360640190fd5b60008381526006602052604081208491601082015460ff16600a811115613f3257fe5b14613f4f5760405162461bcd60e51b815260040161047a9061598a565b6012810154600282015410613f765760405162461bcd60e51b815260040161047a906159bd565b600081601201826002015481548110613f8b57fe5b9060005260206000200154905081601401805490508110613fbe5760405162461bcd60e51b815260040161047a9061587a565b613fc66149a6565b826014018281548110613fd557fe5b6000918252602091829020604080516101208101825260059390930290910180546001600160401b0381168452600160401b900460ff1683850152600180820180548451600261010094831615949094026000190190911692909204601f81018790048702830187018552808352949592949386019391929091908301828280156140a15780601f10614076576101008083540402835291602001916140a1565b820191906000526020600020905b81548152906001019060200180831161408457829003601f168201915b5050509183525050600282810180546040805160206001841615610100026000190190931694909404601f810183900483028501830190915280845293810193908301828280156141335780601f1061410857610100808354040283529160200191614133565b820191906000526020600020905b81548152906001019060200180831161411657829003601f168201915b5050509183525050600382015460208201526004909101546001600160a01b038116604083015260ff600160a01b8204811615156060840152600160a81b8204811615156080840152600160b01b90910416151560a090910152601384018054919250600091849081106141a357fe5b9060005260206000200154146141cb5760405162461bcd60e51b815260040161047a906157bc565b8060c001516141ec5760405162461bcd60e51b815260040161047a90615c1c565b60a08101516001600160a01b031633146142185760405162461bcd60e51b815260040161047a90615b7d565b60008781526006602052604081206002810154601282018054929392909190811061423f57fe5b90600052602060002001549050600082601401828154811061425d57fe5b906000526020600020906005020190508060040160159054906101000a900460ff161561429c5760405162461bcd60e51b815260040161047a90615500565b80548951600160401b90910460ff1660020a10156142cc5760405162461bcd60e51b815260040161047a90615ceb565b805489518a91600160401b900460ff1660020a111561435e57895182548b91600160401b90910460ff1660020a036001600160401b038111801561430f57600080fd5b506040519080825280601f01601f19166020018201604052801561433a576020820181803683370190505b5060405160200161434c9291906152df565b60405160208183030381529060405290505b6060614369826147dc565b9050600073D47860593fe40b3D0E04460e54bFE0b84E1E69226382b0eab8836040518263ffffffff1660e01b81526004016143a49190615380565b60206040518083038186803b1580156143bc57600080fd5b505af41580156143d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143f49190614d97565b8c5190915061440c90600186019060208f01906148f3565b508086601301868154811061441d57fe5b6000918252602090912001556002860180546001019081905542600688015560128701541415614475576011860154156144655760108601805460ff19166002179055614475565b60108601805460ff191660041790555b7fcf09a543fdbd213491ac20efabb93fbbc4be4dabb386c479dc6356050ed37c3e8d8760140187815481106144a657fe5b9060005260206000209060050201604051610a67929190615d5c565b600060016101f460288360008681526006602052604090206010015460ff16600a8111156144ec57fe5b141561450e5750505060008281526006602052604090206005015490506119fb565b600360008681526006602052604090206010015460ff16600a81111561453057fe5b1415614556575050506000828152600660205260409020600501546109600190506119fb565b600260008681526006602052604090206010015460ff16600a81111561457857fe5b14156145a557505050600082815260066020526040902060058101546011909101540260020290506119fb565b600460008681526006602052604090206010015460ff16600a8111156145c757fe5b14156145fe576000858152600660205260409020600581015460039091015464e8d4a510009084025b0482010193505050506119fb565b600660008681526006602052604090206010015460ff16600a81111561462057fe5b141561464d576000858152600660205260409020600581015460039091015464e8d4a510009084026145f0565b600760008681526006602052604090206010015460ff16600a81111561466f57fe5b1415614722576000858152600660205260409081902060058082015490546003909201549251631b8798d560e11b815290926001600160a01b039092169163370f31aa916146c791859187918a918a90600401615e33565b60206040518083038186803b1580156146df57600080fd5b505afa1580156146f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147179190614d97565b0193505050506119fb565b600960008681526006602052604090206010015460ff16600a81111561474457fe5b148061476f5750600860008681526006602052604090206010015460ff16600a81111561476d57fe5b145b806147995750600560008681526006602052604090206010015460ff16600a81111561479757fe5b145b806147c35750600a60008681526006602052604090206010015460ff16600a8111156147c157fe5b145b156147d457600093505050506119fb565b505050919050565b6060600060088351816147eb57fe5b0490506060816001600160401b038111801561480657600080fd5b50604051908082528060200260200182016040528015614830578160200160208202803683370190505b50905060005b828110156148c8576000805b6008811015614880576000878285600802018151811061485e57fe5b01602001516001600160f81b031916600883021c929092179150600101614842565b508060405160200161489291906152ca565b604051602081830303815290604052805190602001208383815181106148b457fe5b602090810291909101015250600101614836565b509392505050565b6000908152600160209081526040808320805460ff191690556002909152812055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282614929576000855561496f565b82601f1061494257805160ff191683800117855561496f565b8280016001018555821561496f579182015b8281111561496f578251825591602001919060010190614954565b5061497b929150614a70565b5090565b60408051608081018252600080825260208201819052918101829052606081019190915290565b60408051610120810182526000808252602082018190526060928201839052828201929092526080810182905260a0810182905260c0810182905260e0810182905261010081019190915290565b82805482825590600052602060002090810192821561496f579160200282018281111561496f578251825591602001919060010190614954565b5080546000825590600052602060002090810190614a4c9190614a70565b50565b5080546000825560050290600052602060002090810190614a4c9190614a85565b5b8082111561497b5760008155600101614a71565b8082111561497b57805468ffffffffffffffffff191681556000614aac6001830182614adc565b614aba600283016000614adc565b50600060038201556004810180546001600160b81b0319169055600501614a85565b50805460018160011615610100020316600290046000825580601f10614b025750614a4c565b601f016020900490600052602060002090810190614a4c9190614a70565b80356001600160a01b03811681146119fb57600080fd5b600082601f830112614b47578081fd5b8135614b5a614b5582615eb8565b615e95565b818152915060208083019084810181840286018201871015614b7b57600080fd5b60005b84811015614b9a57813584529282019290820190600101614b7e565b505050505092915050565b600082601f830112614bb5578081fd5b8135614bc3614b5582615eb8565b818152915060208083019084810160005b84811015614b9a578135870161012080601f19838c03011215614bf657600080fd5b614bff81615e95565b614c0a868401614d4c565b81526040614c19818501614d63565b878301526060808501356001600160401b0380821115614c3857600080fd5b614c468f8b848a0101614ce6565b848601526080935083870135915080821115614c6157600080fd5b50614c708e8a83890101614ce6565b82850152505060a0808501358284015260c09150614c8f828601614b20565b9083015260e0614ca0858201614cdb565b828401526101009150614cb4828601614cdb565b90830152614cc3848401614cdb565b90820152865250509282019290820190600101614bd4565b80356119fb81615f0d565b600082601f830112614cf6578081fd5b81356001600160401b03811115614d0957fe5b614d1c601f8201601f1916602001615e95565b9150808252836020828501011115614d3357600080fd5b8060208401602084013760009082016020015292915050565b80356001600160401b03811681146119fb57600080fd5b803560ff811681146119fb57600080fd5b600060208284031215614d85578081fd5b8151614d9081615f0d565b9392505050565b600060208284031215614da8578081fd5b5051919050565b600060208284031215614dc0578081fd5b5035919050565b60008060408385031215614dd9578081fd5b82359150614de960208401614b20565b90509250929050565b60008060408385031215614e04578182fd5b50508035926020909101359150565b600080600080600060a08688031215614e2a578081fd5b85359450602080870135945060408701356001600160401b0380821115614e4f578384fd5b818901915089601f830112614e62578384fd5b8135614e70614b5582615eb8565b81815284810190848601875b84811015614ea557614e938f8984358a0101614b37565b84529287019290870190600101614e7c565b509098505050506060890135925080831115614ebf578384fd5b614ecb8a848b01614ce6565b94506080890135925080831115614ee0578384fd5b5050614eee88828901614b37565b9150509295509295909350565b600080600080600080600080610100898b031215614f17578586fd5b8835975060208901359650614f2e60408a01614d4c565b9550614f3c60608a01614d63565b94506080890135935060a08901356001600160401b0380821115614f5e578485fd5b818b0191508b601f830112614f71578485fd5b8135614f7f614b5582615eb8565b80828252602082019150602085018f60208086028801011115614fa0578889fd5b8895505b83861015614fca57614fb581614b20565b83526001959095019460209283019201614fa4565b509650505060c08b0135915080821115614fe2578384fd5b50614fef8b828c01614ba5565b925050614ffe60e08a01614cdb565b90509295985092959890939650565b6000806040838503121561501f578182fd5b8235915060208301356001600160401b0381111561503b578182fd5b61504785828601614ce6565b9150509250929050565b6001600160a01b03169052565b6000815180845260208085019450808401835b838110156150965781516001600160a01b031687529582019590820190600101615071565b509495945050505050565b6000815180845260208085019450808401835b83811015615096578151875295820195908201906001016150b4565b6000815180845260208085018081965082840281019150828601855b858110156151bf57828403895281516101206151098683516152b6565b86820151615119888801826152c3565b506040808301518282890152615131838901826151d2565b925050506060808301518783038289015261514c83826151d2565b92505050608080830151818801525060a08083015161516d82890182615051565b505060c080830151615181828901826151cc565b505060e080830151615195828901826151cc565b505061010091820151916151ab878201846151cc565b5099860199945050908401906001016150ec565b5091979650505050505050565b15159052565b600081518084526151ea816020860160208601615ee1565b601f01601f19169290920160200192915050565b6000815460018082166000811461521c576001811461523a57615278565b60028304607f16865260ff1983166020870152604086019350615278565b6002830480875261524a86615ed5565b60005b8281101561526e5781546020828b010152848201915060208101905061524d565b8801602001955050505b50505092915050565b8051151582526020810151151560208301526040810151151560408301526001600160401b0360608201511660608301525050565b6001600160401b03169052565b60ff169052565b6001600160c01b031991909116815260080190565b600083516152f1818460208801615ee1565b835190830190615305818360208801615ee1565b01949350505050565b6001600160a01b03978816815295871660208701526040860194909452919094166060840152608083019390935260a082019290925260c081019190915260e00190565b600060408252615365604083018561505e565b828103602084015261537781856150a1565b95945050505050565b600060208252614d9060208301846150a1565b60006101408083526153a78184018b6150a1565b90506020838203818501526153bc828b61505e565b84810360408601528951808252828b01935090820190845b818110156153f0578451835293830193918301916001016153d4565b50508481036060860152615404818a6151d2565b92505050828103608084015261541a81876150d0565b91505061542a60a0830185615281565b6129e26101208301846151cc565b901515815260200190565b841515815283151560208201526001600160a01b0383166040820152608060608201819052600090615477908301846151d2565b9695505050505050565b921515835290151560208301521515604082015260600190565b90815260200190565b91825260ff16602082015260400190565b6020808252602b908201527f53746174652073686f756c642062652057616974696e67436f6e6669726d617460408201526a696f6e446561646c696e6560a81b606082015260800190565b60208082526027908201527f496e76616c696420647269766520746f20636c61696d20666f72206469726563604082015266742076616c756560c81b606082015260800190565b6020808252601e908201527f506172747920616464726573736573206d75737420626520756e697175650000604082015260600190565b6020808252604c908201527f4472697665207369626c696e6773206d75737420626520636f6d70617469626c60408201527f6520776974682070726576696f757320696e697469616c206861736820666f7260608201526b20656d70747920647269766560a01b608082015260a00190565b60208082526022908201527f726f756e64206475726174696f6e206d7573742062652035302b207365636f6e604082015261647360f01b606082015260800190565b60208082526048908201527f5374617465206d7573742062652057616974696e67436c61696d206f7220576160408201527f6974696e674368616c6c656e67654472697665732c20772f20646561646c696e60608201526719481c185cdcd95960c21b608082015260a00190565b60208082526039908201527f436c61696d6564206472697665206e756d6265722073686f756c64206d617463604082015278341031b630b4b6b2b21039b4b13634b733b990373ab6b132b960391b606082015260800190565b602080825260129082015271092dcecc2d8d2c840c8e4d2ecca92dcc8caf60731b604082015260600190565b6020808252602f908201527f537461746520213d2057616974696e674368616c6c656e6765526573756c742c60408201526e2063616e6e6f742077696e4279564760881b606082015260800190565b60208082526028908201527f6f75747075742064726976652068617320746f206265206174206c65617374206040820152671bdb99481ddbdc9960c21b606082015260800190565b6020808252601e908201527f447269766520686173682073686f756c646e27742062652066696c6c65640000604082015260600190565b60208082526021908201527f496e76616c696420647269766520746f20636c61696d20666f72206c6f6767656040820152603960f91b606082015260800190565b60208082526026908201527f53746174652073686f756c642062652057616974696e674368616c6c656e676560408201526544726976657360d01b606082015260800190565b602080825260139082015272092dcecc2d8d2c840c8e4d2ecca40d2dcc8caf606b1b604082015260600190565b6020808252601a908201527f4c6f67676572206472697665206e6f7420617661696c61626c65000000000000604082015260600190565b60208082526029908201527f43616e6e6f7420646573747275637420696e7374616e63652061742063757272604082015268656e7420737461746560b81b606082015260800190565b6020808252601a908201527f43616e6e6f742061626f72742063757272656e74207374617465000000000000604082015260600190565b602080825260129082015271556e7265636f676e697a656420737461746560701b604082015260600190565b602080825260199082015278537461746520213d2057616974696e6750726f76696465727360381b604082015260600190565b6020808252601b908201527f4e6f20617661696c61626c652070656e64696e67206472697665730000000000604082015260600190565b60208082526018908201527709eeae8e0eae840dcdee840d2dc40ccd2dcc2d840d0c2e6d60431b604082015260600190565b6020808252601190820152702232b0b23634b732903737ba1037bb32b960791b604082015260600190565b60208082526018908201527714d95b99195c881a185cc8185b1c9958591e481d9bdd195960421b604082015260600190565b6020808252601a908201527f6e656564734c6f676765722073686f756c642062652074727565000000000000604082015260600190565b60208082526016908201527553656e646572206d757374206265206120706172747960501b604082015260600190565b60208082526027908201527f64697265637456616c75652068617320746f206265206174206c65617374206f6040820152661b99481ddbdc9960ca1b606082015260800190565b6020808252602c908201527f4f7574707574206c656e67746820646f65736e2774206d61746368206f75747060408201526b7574206c6f67322073697a6560a01b606082015260800190565b60208082526012908201527129b2b73232b910109e90383937bb34b232b960711b604082015260600190565b60208082526027908201527f4f6e6c7920636f6e6365726e65642075736572732063616e206368616c6c656e6040820152666744726976657360c81b606082015260800190565b6020808252601290820152711591c81cdd185d19481b9bdd08199a5b985b60721b604082015260600190565b6020808252601b908201527f7761697450726f76696465722073686f756c6420626520747275650000000000604082015260600190565b602080825260179082015276537461746520213d2057616974696e6752657665616c7360481b604082015260600190565b60208082526018908201527729b2b73232b91036bab9ba10313290309031b630b4b6b2b960411b604082015260600190565b6020808252818101527f437478206d61726b6564206173206e6f206368616c6c656e6765206472697665604082015260600190565b6020808252602c908201527f496e707574206279746573206c656e677468206578636565647320636c61696d60408201526b6564206c6f67322073697a6560a01b606082015260800190565b9182526001600160a01b0316602082015260400190565b918252602082015260400190565b6000838252604060208301528254615d80604084016001600160401b0383166152b6565b615d936060840160ff8360401c166152c3565b50610120806080840152615dae6101608401600186016151fe565b838103603f190160a0850152615dc781600287016151fe565b600386015460c08601526004860154909150615def60e086016001600160a01b038316615051565b615e03610100860160ff8360a01c166151cc565b615e1583860160ff8360a81c166151cc565b615e29610140860160ff8360b01c166151cc565b5095945050505050565b948552602085019390935260408401919091526060830152608082015260a00190565b60006001600160401b038616825260ff851660208301528360408301526080606083015261547760808301846150a1565b60ff91909116815260200190565b6040518181016001600160401b0381118282101715615eb057fe5b604052919050565b60006001600160401b03821115615ecb57fe5b5060209081020190565b60009081526020902090565b60005b83811015615efc578181015183820152602001615ee4565b838111156135d95750506000910152565b8015158114614a4c57600080fdfe395534a9488250c4ea32136ac7cd156150898b4530ec3a5985e3ce6a50d2b36f496e646578206e6f7420696e7374616e74696174656400000000000000000000a264697066735822122081c872c24890ed2e34417baa41d230baade7ce34adc56afaf3b58d8e6a76acff64736f6c63430007040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c8063ab82d9a0116100ad578063c70683ca11610071578063c70683ca146102a8578063c87e3ae9146102bb578063ded4df63146102ce578063f9bc3b21146102e1578063fa0ecc5b146102f45761012c565b8063ab82d9a01461023b578063b72971ee1461024e578063ba0179b514610261578063bfda2e7214610274578063c526656c146102875761012c565b80635748c130116100f45780635748c130146101aa57806373df1612146101bd57806382afd23b146101e3578063995e4339146101f6578063ab5da187146102195761012c565b806301ff62ab1461013157806326987b601461015a578063351e66571461016f5780633d46b819146101845780634c6fe7bf14610197575b600080fd5b61014461013f366004614dc7565b610307565b6040516101519190615438565b60405180910390f35b61016261037f565b604051610151919061549b565b61018261017d366004614e13565b610385565b005b610162610192366004614daf565b610a7e565b6101826101a5366004614daf565b610b28565b6101626101b8366004614daf565b610d0c565b6101d06101cb366004614dc7565b610fa3565b6040516101519796959493929190615393565b6101446101f1366004614daf565b6119e8565b610209610204366004614daf565b611a00565b6040516101519493929190615443565b61022c610227366004614dc7565b611df6565b60405161015193929190615481565b610182610249366004614daf565b611e86565b61016261025c366004614efb565b6121ac565b61018261026f366004614daf565b6129ee565b610182610282366004614daf565b612c70565b61029a610295366004614dc7565b612dc5565b604051610151929190615352565b6101826102b6366004614df2565b612efe565b6101826102c9366004614daf565b6133ed565b6101826102dc366004614daf565b6135df565b6101826102ef366004614daf565b613a9c565b61018261030236600461500d565b613e7f565b600082806000541161034e576040805162461bcd60e51b81526020600482015260166024820152600080516020615f3c833981519152604482015290519081900360640190fd5b505060009182526006602090815260408084206001600160a01b03939093168452600f909201905290205460ff1690565b60005481565b8480600054116103ca576040805162461bcd60e51b81526020600482015260166024820152600080516020615f3c833981519152604482015290519081900360640190fd5b6103d3816119e8565b610415576040805162461bcd60e51b815260206004820152600e60248201526d496e64657820696e61637469766560901b604482015290519081900360640190fd5b6000868152600660205260409020600e810154600c820180548993923392916001600160401b0390911690811061044857fe5b6000918252602090912001546001600160a01b0316146104835760405162461bcd60e51b815260040161047a90615c84565b60405180910390fd5b6000888152600260209081526040808320805460010190556006909152812089916104ad836144c2565b600683015401421190506004601083015460ff16600a8111156104cc57fe5b14806104f257506002601083015460ff16600a8111156104e857fe5b1480156104f25750805b61050e5760405162461bcd60e51b815260040161047a90615632565b88516014830154146105325760405162461bcd60e51b815260040161047a906156a0565b60048201548851600160401b90910460ff1660020a146105645760405162461bcd60e51b815260040161047a90615b31565b606061056f896147dc565b6004848101546040516310561d5760e31b81529293508d9273__$c7dbd794b8c7b5c2028db781007df1176e$__9263d7304dd9926001600160401b03811692600160401b90910460ff169185916382b0eab8916105ce918a9101615380565b60206040518083038186803b1580156105e657600080fd5b505af41580156105fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061e9190614d97565b8d6040518563ffffffff1660e01b815260040161063e9493929190615e56565b60206040518083038186803b15801561065657600080fd5b505af415801561066a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068e9190614d97565b146106ab5760405162461bcd60e51b815260040161047a906159f4565b601483015460005b8181101561099c5760608c82815181106106c957fe5b60200260200101519050856009015473__$c7dbd794b8c7b5c2028db781007df1176e$__63d7304dd988601401858154811061070157fe5b600091825260209091206005909102015460148a0180546001600160401b03909216918790811061072e57fe5b906000526020600020906005020160000160089054906101000a900460ff1673__$c7dbd794b8c7b5c2028db781007df1176e$__63a73426888c601401898154811061077657fe5b600091825260209091206005909102015460405160e083901b6001600160e01b03191681526107b291600160401b900460ff1690600401615e87565b60206040518083038186803b1580156107ca57600080fd5b505af41580156107de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108029190614d97565b866040518563ffffffff1660e01b81526004016108229493929190615e56565b60206040518083038186803b15801561083a57600080fd5b505af415801561084e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108729190614d97565b1461088f5760405162461bcd60e51b815260040161047a9061557e565b73__$c7dbd794b8c7b5c2028db781007df1176e$__63d7304dd98760140184815481106108b857fe5b60009182526020909120600590910201546014890180546001600160401b0390921691869081106108e557fe5b906000526020600020906005020160000160089054906101000a900460ff1689601301868154811061091357fe5b9060005260206000200154856040518563ffffffff1660e01b815260040161093e9493929190615e56565b60206040518083038186803b15801561095657600080fd5b505af415801561096a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098e9190614d97565b6009870155506001016106b3565b50600a84018c905560108401805460ff1916600617905589516109c890600b86019060208d01906148f3565b50600e840154600c85018054600192600f88019260009290916001600160401b03169081106109f357fe5b60009182526020808320909101546001600160a01b03168352820192909252604090810190912080549215156101000261ff001990931692909217909155426006860155517f1e9358f673ff367487ce56f136412ae5b69bf2c06e223aad2756d748c2a9b52a90610a67908f908f90615d4e565b60405180910390a150505050505050505050505050565b6000818060005411610ac5576040805162461bcd60e51b81526020600482015260166024820152600080516020615f3c833981519152604482015290519081900360640190fd5b610ace816119e8565b610b10576040805162461bcd60e51b815260206004820152600e60248201526d496e64657820696e61637469766560901b604482015290519081900360640190fd5b60008381526002602052604090205491505b50919050565b808060005411610b6d576040805162461bcd60e51b81526020600482015260166024820152600080516020615f3c833981519152604482015290519081900360640190fd5b610b76816119e8565b610bb8576040805162461bcd60e51b815260206004820152600e60248201526d496e64657820696e61637469766560901b604482015290519081900360640190fd5b600082815260066020526040812090610bd0846144c2565b8260060154014211905080610bf75760405162461bcd60e51b815260040161047a90615a26565b6000601083015460ff16600a811115610c0c57fe5b1415610c5e576010820180546001919060ff191682805b0217905550600080516020615f1c83398151915284610c4186610d0c565b604051610c4f929190615d4e565b60405180910390a15050610d08565b6003601083015460ff16600a811115610c7357fe5b1415610c8e576010820180546001919060ff19168280610c23565b6004601083015460ff16600a811115610ca357fe5b1415610cbf576010820180546005919060ff1916600183610c23565b6006601083015460ff16600a811115610cd457fe5b1415610cf057601082018054600a919060ff1916600183610c23565b60405162461bcd60e51b815260040161047a90615927565b5050565b6000818060005411610d53576040805162461bcd60e51b81526020600482015260166024820152600080516020615f3c833981519152604482015290519081900360640190fd5b60008381526006602052604081206010015460ff169081600a811115610d7557fe5b1415610d97576f57616974696e6750726f76696465727360801b925050610b22565b600381600a811115610da557fe5b1415610dc5576d57616974696e6752657665616c7360901b925050610b22565b600281600a811115610dd357fe5b1415610dfb577557616974696e674368616c6c656e676544726976657360501b925050610b22565b600581600a811115610e0957fe5b1415610e305774436c61696d65724d6973736564446561646c696e6560581b925050610b22565b600181600a811115610e3e57fe5b1415610e66577550726f76696465724d6973736564446561646c696e6560501b925050610b22565b600481600a811115610e7457fe5b1415610e92576b57616974696e67436c61696d60a01b925050610b22565b600681600a811115610ea057fe5b1415610ecf577f57616974696e67436f6e6669726d6174696f6e446561646c696e650000000000925050610b22565b600781600a811115610edd57fe5b1415610f05577515d85a5d1a5b99d0da185b1b195b99d954995cdd5b1d60521b925050610b22565b600a81600a811115610f1357fe5b1415610f34576e10dbdb9cd95b9cdd5cd4995cdd5b1d608a1b925050610b22565b600881600a811115610f4257fe5b1415610f61576c21b430b63632b733b2b92bb7b760991b925050610b22565b600981600a811115610f6f57fe5b1415610f8b576921b630b4b6b2b92bb7b760b11b925050610b22565b60405162461bcd60e51b815260040161047a9061595e565b6060806060806060610fb361497f565b6000888060005411610ffa576040805162461bcd60e51b81526020600482015260166024820152600080516020615f3c833981519152604482015290519081900360640190fd5b60008a81526006602090815260408083206001600160a01b038d168452600f8101835292819020815160808082018452915460ff808216151583526101008204811615158387015262010000820416151582850152630100000090046001600160401b03166060808301919091528351600480825260a0820190955291985093909291908301908036833701905050905081600301548160008151811061109d57fe5b6020026020010181815250506110b28c6144c2565b826006015401816001815181106110c557fe5b6020908102919091010152600482015481516001600160401b0390911690829060029081106110f057fe5b6020026020010181815250508160040160089054906101000a900460ff1660ff168160038151811061111e57fe5b6020908102919091010152604080516002808252606082810190935281602001602082028036833701905050600e840154909150600160401b90046001600160401b0316156111cf57600e830154600c840180549091600160401b90046001600160401b031690811061118d57fe5b600091825260208220015482516001600160a01b039091169183916111ae57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b600e830154600c8401805490916001600160401b03169081106111ee57fe5b9060005260206000200160009054906101000a90046001600160a01b03168160018151811061121957fe5b6001600160a01b039290921660209283029190910182015260408051600480825260a08201909252606092909190820160808036833701905050905083600801548160008151811061126757fe5b60200260200101818152505083600901548160018151811061128557fe5b60200260200101818152505083600a0154816002815181106112a357fe5b6020026020010181815250506112b88e610d0c565b816003815181106112c557fe5b60209081029190910101526000601085015460ff16600a8111156112e557fe5b14156115ea57604080516001808252818301909252606091816020015b61130a6149a6565b815260200190600190039081611302579050509050846014018560120186600201548154811061133657fe5b90600052602060002001548154811061134b57fe5b6000918252602091829020604080516101208101825260059390930290910180546001600160401b0381168452600160401b900460ff1683850152600180820180548451600261010094831615949094026000190190911692909204601f81018790048702830187018552808352949592949386019391929091908301828280156114175780601f106113ec57610100808354040283529160200191611417565b820191906000526020600020905b8154815290600101906020018083116113fa57829003601f168201915b5050509183525050600282810180546040805160206001841615610100026000190190931694909404601f810183900483028501830190915280845293810193908301828280156114a95780601f1061147e576101008083540402835291602001916114a9565b820191906000526020600020905b81548152906001019060200180831161148c57829003601f168201915b5050509183525050600382015460208201526004909101546001600160a01b038116604083015260ff600160a01b8204811615156060840152600160a81b8204811615156080840152600160b01b90910416151560a0909101528151829060009061151057fe5b602002602001018190525083838387600b01848c8a60150160009054906101000a900460ff16838054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115cb5780601f106115a0576101008083540402835291602001916115cb565b820191906000526020600020905b8154815290600101906020018083116115ae57829003601f168201915b505050505093509c509c509c509c509c509c509c5050505050506119db565b6003601085015460ff16600a8111156115ff57fe5b141561165057604080516001808252818301909252606091816020015b6116246149a6565b81526020019060019003908161161c579050509050846014018560110186600101548154811061133657fe5b6001601085015460ff16600a81111561166557fe5b1415611726576040805160008082526020820190925260609161169e565b61168b6149a6565b8152602001906001900390816116835790505b50905083838387600b01848c8a60150160009054906101000a900460ff16838054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115cb5780601f106115a0576101008083540402835291602001916115cb565b6015840154600b8501805460408051602060026101006001861615026000190190941693909304601f8101849004840282018401909252818152879487948794909360148c01938f9360ff1692909186918301828280156117c85780601f1061179d576101008083540402835291602001916117c8565b820191906000526020600020905b8154815290600101906020018083116117ab57829003601f168201915b5050505050935082805480602002602001604051908101604052809291908181526020016000905b828210156119c257600084815260209081902060408051610120810182526005860290920180546001600160401b0381168452600160401b900460ff1683850152600180820180548451600261010094831615949094026000190190911692909204601f81018790048702830187018552808352949592949386019391929091908301828280156118c25780601f10611897576101008083540402835291602001916118c2565b820191906000526020600020905b8154815290600101906020018083116118a557829003601f168201915b5050509183525050600282810180546040805160206001841615610100026000190190931694909404601f810183900483028501830190915280845293810193908301828280156119545780601f1061192957610100808354040283529160200191611954565b820191906000526020600020905b81548152906001019060200180831161193757829003601f168201915b505050918352505060038201546020808301919091526004909201546001600160a01b038116604083015260ff600160a01b8204811615156060840152600160a81b8204811615156080840152600160b01b90910416151560a09091015290825260019290920191016117f0565b5050505092509b509b509b509b509b509b509b50505050505b5092959891949750929550565b60008181526001602052604090205460ff165b919050565b60008060006060848060005411611a4c576040805162461bcd60e51b81526020600482015260166024820152600080516020615f3c833981519152604482015290519081900360640190fd5b6000868152600660205260409020600a601082015460ff16600a811115611a6f57fe5b1415611b2857600160008083600b01808054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611b135780601f10611ae857610100808354040283529160200191611b13565b820191906000526020600020905b815481529060010190602001808311611af657829003601f168201915b50505050509050955095509550955050611dee565b6000601082015460ff16600a811115611b3d57fe5b1480611b5b57506002601082015460ff16600a811115611b5957fe5b145b80611b7857506004601082015460ff16600a811115611b7657fe5b145b80611b9557506006601082015460ff16600a811115611b9357fe5b145b80611bb257506007601082015460ff16600a811115611bb057fe5b145b80611bcf57506003601082015460ff16600a811115611bcd57fe5b145b15611bf85760006001600060405180602001604052806000815250955095509550955050611dee565b6001601082015460ff16600a811115611c0d57fe5b1415611d1057600087815260066020526040812060128101546002909101541015611c82578160140182601201836002015481548110611c4957fe5b906000526020600020015481548110611c5e57fe5b60009182526020909120600460059092020101546001600160a01b03169050611ced565b600088815260066020526040902060118101546001909101541015611ced578160140182601101836001015481548110611cb857fe5b906000526020600020015481548110611ccd57fe5b60009182526020909120600460059092020101546001600160a01b031690505b600080826040518060200160405280600081525096509650965096505050611dee565b6005601082015460ff16600a811115611d2557fe5b1480611d4357506008601082015460ff16600a811115611d4157fe5b145b15611da157600e810154600c820180546000928392916001600160401b03909116908110611d6d57fe5b60009182526020808320909101546040805192830190529181529298509096506001600160a01b031694509250611dee9050565b6009601082015460ff16600a811115611db657fe5b1415610f8b5760008082600c0183600e0160089054906101000a90046001600160401b03166001600160401b031681548110611d6d57fe5b509193509193565b6000806000848060005411611e40576040805162461bcd60e51b81526020600482015260166024820152600080516020615f3c833981519152604482015290519081900360640190fd5b5050506000928352506006602090815260408084206001600160a01b039093168452600f909201905290205460ff80821692610100830482169262010000900490911690565b808060005411611ecb576040805162461bcd60e51b81526020600482015260166024820152600080516020615f3c833981519152604482015290519081900360640190fd5b611ed4816119e8565b611f16576040805162461bcd60e51b815260206004820152600e60248201526d496e64657820696e61637469766560901b604482015290519081900360640190fd5b6000828152600660209081526040808320338452600f81019092529091205483919060ff16611f575760405162461bcd60e51b815260040161047a90615aba565b6000848152600660209081526040808320338452600f810190925290912054859190610100900460ff1615611f9e5760405162461bcd60e51b815260040161047a90615a51565b6000868152600260209081526040808320805460010190556006918290529091208791601082015460ff16600a811115611fd457fe5b14611ff15760405162461bcd60e51b815260040161047a906154b5565b600554600e820154600c830180546001600160a01b03909316926320b73870923392916001600160401b0390911690811061202857fe5b6000918252602090912001546005850154600380546009880154600a890154928901546040516001600160e01b031960e08a901b16815261207e97966001600160a01b039081169695941693919060040161530e565b602060405180830381600087803b15801561209857600080fd5b505af11580156120ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d09190614d97565b60078083019190915560108201805460ff19166001830217905550336000908152600f8201602052604090819020805461ff0019166101001790819055600e83018054600160801b600160401b6001600160401b03630100000090950485160267ffffffffffffffff60401b199092169190911781810484166001019093160267ffffffffffffffff60801b19909216919091179055426006830155517fa895da4b794aeba8d8082db237265459db7b7ffdb5aa7c2332a7c5eafbfae7359061219a908a9061549b565b60405180910390a15050505050505050565b600060328510156121cf5760405162461bcd60e51b815260040161047a906155f0565b600080548152600660205260408120905b8551816001600160401b031610156123795781600f01600087836001600160401b03168151811061220d57fe5b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16156122515760405162461bcd60e51b815260040161047a90615547565b600182600f01600088846001600160401b03168151811061226e57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060000160006101000a81548160ff0219169083151502179055508082600f01600088846001600160401b0316815181106122cc57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060000160036101000a8154816001600160401b0302191690836001600160401b0316021790555081600c0186826001600160401b03168151811061233457fe5b60209081029190910181015182546001808201855560009485529290932090920180546001600160a01b0319166001600160a01b0390931692909217909155016121e0565b508351600090806001600160401b038111801561239557600080fd5b506040519080825280602002602001820160405280156123bf578160200160208202803683370190505b5080516123d69160138601916020909101906149f4565b5060158301805460ff191686151517905560005b81811015612887576123fa6149a6565b87828151811061240657fe5b602002602001015190508060e001516125e6576003816020015160ff1610156124415760405162461bcd60e51b815260040161047a90615aea565b8060c001516125c357806020015160ff1660020a81604001515111156124795760405162461bcd60e51b815260040161047a90615ceb565b60408101516020820151815160ff90911660020a111561250a5760408201518051602084015160ff1660020a036001600160401b03811180156124bb57600080fd5b506040519080825280601f01601f1916602001820160405280156124e6576020820181803683370190505b506040516020016124f89291906152df565b60405160208183030381529060405290505b6060612515826147dc565b6040516310561d5760e31b815290915073__$c7dbd794b8c7b5c2028db781007df1176e$__906382b0eab89061254f908490600401615380565b60206040518083038186803b15801561256757600080fd5b505af415801561257b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259f9190614d97565b8760130185815481106125ae57fe5b906000526020600020018190555050506125e1565b60128501805460018181018355600092835260209092200183905593505b6126f7565b8060c001516126d957806080015185601301838154811061260357fe5b6000918252602091829020019190915560048054608084015192840151604051632b6baa3760e21b81526001600160a01b039092169363adaea8dc9361264c93919291016154a4565b60206040518083038186803b15801561266457600080fd5b505afa158015612678573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061269c9190614d74565b1580156126b5575060a08101516001600160a01b031615155b156125e15760118501805460018101825560009182526020909120018290556126f7565b60128501805460018181018355600092835260209092200183905593505b604080516101208101825282516001600160401b03908116825260208085015160ff90811682850190815286860151958501958652606080880151908601526080808801519086015260a0808801516001600160a01b03169086015260c08088015115159086015260e0808801511515908601526101008088015115159086015260148b0180546001808201835560009283529185902087516005909202018054935167ffffffffffffffff19909416919096161760ff60401b1916600160401b929093169190910291909117835593518051939492936127df9385019291909101906148f3565b50606082015180516127fb9160028401916020909101906148f3565b506080820151600382015560a08201516004909101805460c084015160e0850151610100909501511515600160b01b0260ff60b01b19951515600160a81b0260ff60a81b19921515600160a01b0260ff60a01b196001600160a01b039097166001600160a01b0319909516949094179590951692909217169290921792909216179055506001016123ea565b5060038960ff1610156128ac5760405162461bcd60e51b815260040161047a90615774565b8254336001600160a01b0319909116178355600e83018054600160801b67ffffffffffffffff60801b19909116179055600383018c9055600883018b9055600983018b905560048301805467ffffffffffffffff19166001600160401b038c161760ff60401b1916600160401b60ff8c1602179055600583018890554260068401558115612950576010830180546000919060ff19166001835b0217905550612980565b601183015415612970576010830180546002919060ff1916600183612946565b60108301805460ff191660041790555b7f74f4614e097fc158c85ea12787f9e678e96166b4f523416bdb792747c47f1bac6000546040516129b1919061549b565b60405180910390a150506000805481526001602081905260408220805460ff19168217905581549081019091559150505b98975050505050505050565b808060005411612a33576040805162461bcd60e51b81526020600482015260166024820152600080516020615f3c833981519152604482015290519081900360640190fd5b612a3c816119e8565b612a7e576040805162461bcd60e51b815260206004820152600e60248201526d496e64657820696e61637469766560901b604482015290519081900360640190fd5b6000828152600660209081526040808320338452600f81019092529091205483919060ff16612abf5760405162461bcd60e51b815260040161047a90615aba565b6000848152600660209081526040808320338452600f810190925290912054859190610100900460ff1615612b065760405162461bcd60e51b815260040161047a90615a51565b6000868152600260209081526040808320805460010190556006918290529091208791601082015460ff16600a811115612b3c57fe5b14612b595760405162461bcd60e51b815260040161047a906154b5565b600d81018054600181810183556000928352602080842090920180546001600160a01b03191633908117909155808452600f8501909252604092839020805461ff001916610100179055600e840180546001600160401b03600160801b80830482169094011690920267ffffffffffffffff60801b1990921691909117905590517f6f220d98c15dbd07fdc24781b682ea34f92411fc61b83c761dd927afbe02d3fd91612c08918b9190615d37565b60405180910390a1600c810154600e820154600160801b90046001600160401b03161415612c665760108101805460ff1916600a179055600080516020615f1c83398151915288612c5881610d0c565b60405161219a929190615d4e565b5050505050505050565b808060005411612cb5576040805162461bcd60e51b81526020600482015260166024820152600080516020615f3c833981519152604482015290519081900360640190fd5b612cbe816119e8565b612d00576040805162461bcd60e51b815260206004820152600e60248201526d496e64657820696e61637469766560901b604482015290519081900360640190fd5b60008281526002602090815260408083208054600101905560069091529020601581015483919060ff1615612d475760405162461bcd60e51b815260040161047a90615cb6565b6002601082015460ff16600a811115612d5c57fe5b14612d795760405162461bcd60e51b815260040161047a90615834565b336000908152600f8201602052604090205460ff16612daa5760405162461bcd60e51b815260040161047a90615ba9565b60108101805460ff1916600317905542600690910155505050565b606080838060005411612e0d576040805162461bcd60e51b81526020600482015260166024820152600080516020615f3c833981519152604482015290519081900360640190fd5b606080600760008881526006602052604090206010015460ff16600a811115612e3257fe5b1415612ed85760408051600180825281830190925290602080830190803683375050604080516001808252818301909252929450905060208083019080368337505060055484519293506001600160a01b031691849150600090612e9257fe5b6001600160a01b03909216602092830291909101820152600088815260069091526040812060070154825190918391612ec757fe5b602002602001018181525050612ef2565b505060408051600080825260208201908152818301909252905b90969095509350505050565b818060005411612f43576040805162461bcd60e51b81526020600482015260166024820152600080516020615f3c833981519152604482015290519081900360640190fd5b612f4c816119e8565b612f8e576040805162461bcd60e51b815260206004820152600e60248201526d496e64657820696e61637469766560901b604482015290519081900360640190fd5b60008381526006602052604081208491601082015460ff16600a811115612fb157fe5b14612fce5760405162461bcd60e51b815260040161047a9061598a565b6012810154600282015410612ff55760405162461bcd60e51b815260040161047a906159bd565b60008160120182600201548154811061300a57fe5b906000526020600020015490508160140180549050811061303d5760405162461bcd60e51b815260040161047a9061587a565b6130456149a6565b82601401828154811061305457fe5b6000918252602091829020604080516101208101825260059390930290910180546001600160401b0381168452600160401b900460ff1683850152600180820180548451600261010094831615949094026000190190911692909204601f81018790048702830187018552808352949592949386019391929091908301828280156131205780601f106130f557610100808354040283529160200191613120565b820191906000526020600020905b81548152906001019060200180831161310357829003601f168201915b5050509183525050600282810180546040805160206001841615610100026000190190931694909404601f810183900483028501830190915280845293810193908301828280156131b25780601f10613187576101008083540402835291602001916131b2565b820191906000526020600020905b81548152906001019060200180831161319557829003601f168201915b5050509183525050600382015460208201526004909101546001600160a01b038116604083015260ff600160a01b8204811615156060840152600160a81b8204811615156080840152600160b01b90910416151560a0909101526013840180549192506000918490811061322257fe5b90600052602060002001541461324a5760405162461bcd60e51b815260040161047a906157bc565b8060c0015161326b5760405162461bcd60e51b815260040161047a90615c1c565b60a08101516001600160a01b031633146132975760405162461bcd60e51b815260040161047a90615b7d565b6000878152600660205260408120600281015460128201805492939290919081106132be57fe5b9060005260206000200154905060008260140182815481106132dc57fe5b906000526020600020906005020190508060040160159054906101000a900460ff1661331a5760405162461bcd60e51b815260040161047a906157f3565b600381018990556013830180548a91908490811061333457fe5b600091825260209091200155600283018054600101908190554260068501556012840154141561338c5760118301541561337c5760108301805460ff1916600217905561338c565b60108301805460ff191660041790555b7fcf09a543fdbd213491ac20efabb93fbbc4be4dabb386c479dc6356050ed37c3e8a8460140184815481106133bd57fe5b90600052602060002090600502016040516133d9929190615d5c565b60405180910390a150505050505050505050565b808060005411613432576040805162461bcd60e51b81526020600482015260166024820152600080516020615f3c833981519152604482015290519081900360640190fd5b61343b816119e8565b61347d576040805162461bcd60e51b815260206004820152600e60248201526d496e64657820696e61637469766560901b604482015290519081900360640190fd5b6000828152600660205260409020546001600160a01b03163381146134e4576040805162461bcd60e51b815260206004820152601860248201527721b0b73737ba1031329031b0b63632b210313c903ab9b2b960411b604482015290519081900360640190fd5b60008381526006602052604090206001601082015460ff16600a81111561350757fe5b148061352557506005601082015460ff16600a81111561352357fe5b145b806135425750600a601082015460ff16600a81111561354057fe5b145b8061355f57506008601082015460ff16600a81111561355d57fe5b145b8061357c57506009601082015460ff16600a81111561357a57fe5b145b6135985760405162461bcd60e51b815260040161047a906158de565b6135a6601182016000614a2e565b6135b4601282016000614a2e565b6135c2601382016000614a2e565b6135d0601482016000614a4f565b6135d9846148d0565b50505050565b808060005411613624576040805162461bcd60e51b81526020600482015260166024820152600080516020615f3c833981519152604482015290519081900360640190fd5b61362d816119e8565b61366f576040805162461bcd60e51b815260206004820152600e60248201526d496e64657820696e61637469766560901b604482015290519081900360640190fd5b6000828152600260209081526040808320805460010190556006909152902082906007601082015460ff16600a8111156136a557fe5b146136c25760405162461bcd60e51b815260040161047a90615725565b426006820155600781015460055460405163b6b5c31960e01b81526001600160a01b039091169063b6b5c319906136fd90849060040161549b565b60206040518083038186803b15801561371557600080fd5b505afa158015613729573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061374d9190614d74565b1561392357600e820154600c83018054600192600f86019260009290916001600160401b031690811061377c57fe5b60009182526020808320909101546001600160a01b0316835282019290925260400181208054921515620100000262ff000019909316929092179091555b600d83015481101561381f57600083600f01600085600d0184815481106137dd57fe5b60009182526020808320909101546001600160a01b03168352820192909252604001902080549115156101000261ff00199092169190911790556001016137ba565b50600d82018054600e840180546001600160401b03600160801b8083048216949094031690920267ffffffffffffffff60801b19909216919091179055613867906000614a2e565b600c820154600e830154600160801b90046001600160401b031614156138d4576010820180546008919060ff19166001835b0217905550600080516020615f1c833981519152856138b787610d0c565b6040516138c5929190615d4e565b60405180910390a15050613a97565b6010820180546004919060ff1916600183021790555050600e018054600160401b81046001600160401b031667ffffffffffffffff199091161767ffffffffffffffff60401b19169055613a97565b600554604051633664f8bf60e11b81526001600160a01b0390911690636cc9f17e9061395390849060040161549b565b60206040518083038186803b15801561396b57600080fd5b505afa15801561397f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139a39190614d74565b15613a7c57600182600f01600084600c0185600e0160089054906101000a90046001600160401b03166001600160401b0316815481106139df57fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190208054911515620100000262ff000019909216919091179055600c820154600e8301546001600160401b03600160801b909104161415613a52576010820180546009919060ff1916600183613899565b5060108101805460ff19166006179055600e01805467ffffffffffffffff60401b19169055613a97565b60405162461bcd60e51b815260040161047a90615bf0565b50505b505050565b808060005411613ae1576040805162461bcd60e51b81526020600482015260166024820152600080516020615f3c833981519152604482015290519081900360640190fd5b613aea816119e8565b613b2c576040805162461bcd60e51b815260206004820152600e60248201526d496e64657820696e61637469766560901b604482015290519081900360640190fd5b60008281526006602052604090206003601082015460ff16600a811115613b4f57fe5b14613b6c5760405162461bcd60e51b815260040161047a90615c53565b600081601101826001015481548110613b8157fe5b9060005260206000200154905081601401805490508110613bb45760405162461bcd60e51b815260040161047a906156f9565b613bbc6149a6565b826014018281548110613bcb57fe5b6000918252602091829020604080516101208101825260059390930290910180546001600160401b0381168452600160401b900460ff1683850152600180820180548451600261010094831615949094026000190190911692909204601f8101879004870283018701855280835294959294938601939192909190830182828015613c975780601f10613c6c57610100808354040283529160200191613c97565b820191906000526020600020905b815481529060010190602001808311613c7a57829003601f168201915b5050509183525050600282810180546040805160206001841615610100026000190190931694909404601f81018390048302850183019091528084529381019390830182828015613d295780601f10613cfe57610100808354040283529160200191613d29565b820191906000526020600020905b815481529060010190602001808311613d0c57829003601f168201915b5050509183525050600382015460208201526004909101546001600160a01b038116604083015260ff600160a01b8204811615156060840152600160a81b8204811615156080840152600160b01b90910416151560a09091015260e0810151909150613da75760405162461bcd60e51b815260040161047a90615a83565b6004805460808301516020840151604051632b6baa3760e21b81526001600160a01b039093169363adaea8dc93613de0939291016154a4565b60206040518083038186803b158015613df857600080fd5b505afa158015613e0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e309190614d74565b613e4c5760405162461bcd60e51b815260040161047a906158a7565b600180840180549091019081905542600685015560118401541415613a94575050601001805460ff191660041790555050565b818060005411613ec4576040805162461bcd60e51b81526020600482015260166024820152600080516020615f3c833981519152604482015290519081900360640190fd5b613ecd816119e8565b613f0f576040805162461bcd60e51b815260206004820152600e60248201526d496e64657820696e61637469766560901b604482015290519081900360640190fd5b60008381526006602052604081208491601082015460ff16600a811115613f3257fe5b14613f4f5760405162461bcd60e51b815260040161047a9061598a565b6012810154600282015410613f765760405162461bcd60e51b815260040161047a906159bd565b600081601201826002015481548110613f8b57fe5b9060005260206000200154905081601401805490508110613fbe5760405162461bcd60e51b815260040161047a9061587a565b613fc66149a6565b826014018281548110613fd557fe5b6000918252602091829020604080516101208101825260059390930290910180546001600160401b0381168452600160401b900460ff1683850152600180820180548451600261010094831615949094026000190190911692909204601f81018790048702830187018552808352949592949386019391929091908301828280156140a15780601f10614076576101008083540402835291602001916140a1565b820191906000526020600020905b81548152906001019060200180831161408457829003601f168201915b5050509183525050600282810180546040805160206001841615610100026000190190931694909404601f810183900483028501830190915280845293810193908301828280156141335780601f1061410857610100808354040283529160200191614133565b820191906000526020600020905b81548152906001019060200180831161411657829003601f168201915b5050509183525050600382015460208201526004909101546001600160a01b038116604083015260ff600160a01b8204811615156060840152600160a81b8204811615156080840152600160b01b90910416151560a090910152601384018054919250600091849081106141a357fe5b9060005260206000200154146141cb5760405162461bcd60e51b815260040161047a906157bc565b8060c001516141ec5760405162461bcd60e51b815260040161047a90615c1c565b60a08101516001600160a01b031633146142185760405162461bcd60e51b815260040161047a90615b7d565b60008781526006602052604081206002810154601282018054929392909190811061423f57fe5b90600052602060002001549050600082601401828154811061425d57fe5b906000526020600020906005020190508060040160159054906101000a900460ff161561429c5760405162461bcd60e51b815260040161047a90615500565b80548951600160401b90910460ff1660020a10156142cc5760405162461bcd60e51b815260040161047a90615ceb565b805489518a91600160401b900460ff1660020a111561435e57895182548b91600160401b90910460ff1660020a036001600160401b038111801561430f57600080fd5b506040519080825280601f01601f19166020018201604052801561433a576020820181803683370190505b5060405160200161434c9291906152df565b60405160208183030381529060405290505b6060614369826147dc565b9050600073__$c7dbd794b8c7b5c2028db781007df1176e$__6382b0eab8836040518263ffffffff1660e01b81526004016143a49190615380565b60206040518083038186803b1580156143bc57600080fd5b505af41580156143d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143f49190614d97565b8c5190915061440c90600186019060208f01906148f3565b508086601301868154811061441d57fe5b6000918252602090912001556002860180546001019081905542600688015560128701541415614475576011860154156144655760108601805460ff19166002179055614475565b60108601805460ff191660041790555b7fcf09a543fdbd213491ac20efabb93fbbc4be4dabb386c479dc6356050ed37c3e8d8760140187815481106144a657fe5b9060005260206000209060050201604051610a67929190615d5c565b600060016101f460288360008681526006602052604090206010015460ff16600a8111156144ec57fe5b141561450e5750505060008281526006602052604090206005015490506119fb565b600360008681526006602052604090206010015460ff16600a81111561453057fe5b1415614556575050506000828152600660205260409020600501546109600190506119fb565b600260008681526006602052604090206010015460ff16600a81111561457857fe5b14156145a557505050600082815260066020526040902060058101546011909101540260020290506119fb565b600460008681526006602052604090206010015460ff16600a8111156145c757fe5b14156145fe576000858152600660205260409020600581015460039091015464e8d4a510009084025b0482010193505050506119fb565b600660008681526006602052604090206010015460ff16600a81111561462057fe5b141561464d576000858152600660205260409020600581015460039091015464e8d4a510009084026145f0565b600760008681526006602052604090206010015460ff16600a81111561466f57fe5b1415614722576000858152600660205260409081902060058082015490546003909201549251631b8798d560e11b815290926001600160a01b039092169163370f31aa916146c791859187918a918a90600401615e33565b60206040518083038186803b1580156146df57600080fd5b505afa1580156146f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147179190614d97565b0193505050506119fb565b600960008681526006602052604090206010015460ff16600a81111561474457fe5b148061476f5750600860008681526006602052604090206010015460ff16600a81111561476d57fe5b145b806147995750600560008681526006602052604090206010015460ff16600a81111561479757fe5b145b806147c35750600a60008681526006602052604090206010015460ff16600a8111156147c157fe5b145b156147d457600093505050506119fb565b505050919050565b6060600060088351816147eb57fe5b0490506060816001600160401b038111801561480657600080fd5b50604051908082528060200260200182016040528015614830578160200160208202803683370190505b50905060005b828110156148c8576000805b6008811015614880576000878285600802018151811061485e57fe5b01602001516001600160f81b031916600883021c929092179150600101614842565b508060405160200161489291906152ca565b604051602081830303815290604052805190602001208383815181106148b457fe5b602090810291909101015250600101614836565b509392505050565b6000908152600160209081526040808320805460ff191690556002909152812055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282614929576000855561496f565b82601f1061494257805160ff191683800117855561496f565b8280016001018555821561496f579182015b8281111561496f578251825591602001919060010190614954565b5061497b929150614a70565b5090565b60408051608081018252600080825260208201819052918101829052606081019190915290565b60408051610120810182526000808252602082018190526060928201839052828201929092526080810182905260a0810182905260c0810182905260e0810182905261010081019190915290565b82805482825590600052602060002090810192821561496f579160200282018281111561496f578251825591602001919060010190614954565b5080546000825590600052602060002090810190614a4c9190614a70565b50565b5080546000825560050290600052602060002090810190614a4c9190614a85565b5b8082111561497b5760008155600101614a71565b8082111561497b57805468ffffffffffffffffff191681556000614aac6001830182614adc565b614aba600283016000614adc565b50600060038201556004810180546001600160b81b0319169055600501614a85565b50805460018160011615610100020316600290046000825580601f10614b025750614a4c565b601f016020900490600052602060002090810190614a4c9190614a70565b80356001600160a01b03811681146119fb57600080fd5b600082601f830112614b47578081fd5b8135614b5a614b5582615eb8565b615e95565b818152915060208083019084810181840286018201871015614b7b57600080fd5b60005b84811015614b9a57813584529282019290820190600101614b7e565b505050505092915050565b600082601f830112614bb5578081fd5b8135614bc3614b5582615eb8565b818152915060208083019084810160005b84811015614b9a578135870161012080601f19838c03011215614bf657600080fd5b614bff81615e95565b614c0a868401614d4c565b81526040614c19818501614d63565b878301526060808501356001600160401b0380821115614c3857600080fd5b614c468f8b848a0101614ce6565b848601526080935083870135915080821115614c6157600080fd5b50614c708e8a83890101614ce6565b82850152505060a0808501358284015260c09150614c8f828601614b20565b9083015260e0614ca0858201614cdb565b828401526101009150614cb4828601614cdb565b90830152614cc3848401614cdb565b90820152865250509282019290820190600101614bd4565b80356119fb81615f0d565b600082601f830112614cf6578081fd5b81356001600160401b03811115614d0957fe5b614d1c601f8201601f1916602001615e95565b9150808252836020828501011115614d3357600080fd5b8060208401602084013760009082016020015292915050565b80356001600160401b03811681146119fb57600080fd5b803560ff811681146119fb57600080fd5b600060208284031215614d85578081fd5b8151614d9081615f0d565b9392505050565b600060208284031215614da8578081fd5b5051919050565b600060208284031215614dc0578081fd5b5035919050565b60008060408385031215614dd9578081fd5b82359150614de960208401614b20565b90509250929050565b60008060408385031215614e04578182fd5b50508035926020909101359150565b600080600080600060a08688031215614e2a578081fd5b85359450602080870135945060408701356001600160401b0380821115614e4f578384fd5b818901915089601f830112614e62578384fd5b8135614e70614b5582615eb8565b81815284810190848601875b84811015614ea557614e938f8984358a0101614b37565b84529287019290870190600101614e7c565b509098505050506060890135925080831115614ebf578384fd5b614ecb8a848b01614ce6565b94506080890135925080831115614ee0578384fd5b5050614eee88828901614b37565b9150509295509295909350565b600080600080600080600080610100898b031215614f17578586fd5b8835975060208901359650614f2e60408a01614d4c565b9550614f3c60608a01614d63565b94506080890135935060a08901356001600160401b0380821115614f5e578485fd5b818b0191508b601f830112614f71578485fd5b8135614f7f614b5582615eb8565b80828252602082019150602085018f60208086028801011115614fa0578889fd5b8895505b83861015614fca57614fb581614b20565b83526001959095019460209283019201614fa4565b509650505060c08b0135915080821115614fe2578384fd5b50614fef8b828c01614ba5565b925050614ffe60e08a01614cdb565b90509295985092959890939650565b6000806040838503121561501f578182fd5b8235915060208301356001600160401b0381111561503b578182fd5b61504785828601614ce6565b9150509250929050565b6001600160a01b03169052565b6000815180845260208085019450808401835b838110156150965781516001600160a01b031687529582019590820190600101615071565b509495945050505050565b6000815180845260208085019450808401835b83811015615096578151875295820195908201906001016150b4565b6000815180845260208085018081965082840281019150828601855b858110156151bf57828403895281516101206151098683516152b6565b86820151615119888801826152c3565b506040808301518282890152615131838901826151d2565b925050506060808301518783038289015261514c83826151d2565b92505050608080830151818801525060a08083015161516d82890182615051565b505060c080830151615181828901826151cc565b505060e080830151615195828901826151cc565b505061010091820151916151ab878201846151cc565b5099860199945050908401906001016150ec565b5091979650505050505050565b15159052565b600081518084526151ea816020860160208601615ee1565b601f01601f19169290920160200192915050565b6000815460018082166000811461521c576001811461523a57615278565b60028304607f16865260ff1983166020870152604086019350615278565b6002830480875261524a86615ed5565b60005b8281101561526e5781546020828b010152848201915060208101905061524d565b8801602001955050505b50505092915050565b8051151582526020810151151560208301526040810151151560408301526001600160401b0360608201511660608301525050565b6001600160401b03169052565b60ff169052565b6001600160c01b031991909116815260080190565b600083516152f1818460208801615ee1565b835190830190615305818360208801615ee1565b01949350505050565b6001600160a01b03978816815295871660208701526040860194909452919094166060840152608083019390935260a082019290925260c081019190915260e00190565b600060408252615365604083018561505e565b828103602084015261537781856150a1565b95945050505050565b600060208252614d9060208301846150a1565b60006101408083526153a78184018b6150a1565b90506020838203818501526153bc828b61505e565b84810360408601528951808252828b01935090820190845b818110156153f0578451835293830193918301916001016153d4565b50508481036060860152615404818a6151d2565b92505050828103608084015261541a81876150d0565b91505061542a60a0830185615281565b6129e26101208301846151cc565b901515815260200190565b841515815283151560208201526001600160a01b0383166040820152608060608201819052600090615477908301846151d2565b9695505050505050565b921515835290151560208301521515604082015260600190565b90815260200190565b91825260ff16602082015260400190565b6020808252602b908201527f53746174652073686f756c642062652057616974696e67436f6e6669726d617460408201526a696f6e446561646c696e6560a81b606082015260800190565b60208082526027908201527f496e76616c696420647269766520746f20636c61696d20666f72206469726563604082015266742076616c756560c81b606082015260800190565b6020808252601e908201527f506172747920616464726573736573206d75737420626520756e697175650000604082015260600190565b6020808252604c908201527f4472697665207369626c696e6773206d75737420626520636f6d70617469626c60408201527f6520776974682070726576696f757320696e697469616c206861736820666f7260608201526b20656d70747920647269766560a01b608082015260a00190565b60208082526022908201527f726f756e64206475726174696f6e206d7573742062652035302b207365636f6e604082015261647360f01b606082015260800190565b60208082526048908201527f5374617465206d7573742062652057616974696e67436c61696d206f7220576160408201527f6974696e674368616c6c656e67654472697665732c20772f20646561646c696e60608201526719481c185cdcd95960c21b608082015260a00190565b60208082526039908201527f436c61696d6564206472697665206e756d6265722073686f756c64206d617463604082015278341031b630b4b6b2b21039b4b13634b733b990373ab6b132b960391b606082015260800190565b602080825260129082015271092dcecc2d8d2c840c8e4d2ecca92dcc8caf60731b604082015260600190565b6020808252602f908201527f537461746520213d2057616974696e674368616c6c656e6765526573756c742c60408201526e2063616e6e6f742077696e4279564760881b606082015260800190565b60208082526028908201527f6f75747075742064726976652068617320746f206265206174206c65617374206040820152671bdb99481ddbdc9960c21b606082015260800190565b6020808252601e908201527f447269766520686173682073686f756c646e27742062652066696c6c65640000604082015260600190565b60208082526021908201527f496e76616c696420647269766520746f20636c61696d20666f72206c6f6767656040820152603960f91b606082015260800190565b60208082526026908201527f53746174652073686f756c642062652057616974696e674368616c6c656e676560408201526544726976657360d01b606082015260800190565b602080825260139082015272092dcecc2d8d2c840c8e4d2ecca40d2dcc8caf606b1b604082015260600190565b6020808252601a908201527f4c6f67676572206472697665206e6f7420617661696c61626c65000000000000604082015260600190565b60208082526029908201527f43616e6e6f7420646573747275637420696e7374616e63652061742063757272604082015268656e7420737461746560b81b606082015260800190565b6020808252601a908201527f43616e6e6f742061626f72742063757272656e74207374617465000000000000604082015260600190565b602080825260129082015271556e7265636f676e697a656420737461746560701b604082015260600190565b602080825260199082015278537461746520213d2057616974696e6750726f76696465727360381b604082015260600190565b6020808252601b908201527f4e6f20617661696c61626c652070656e64696e67206472697665730000000000604082015260600190565b60208082526018908201527709eeae8e0eae840dcdee840d2dc40ccd2dcc2d840d0c2e6d60431b604082015260600190565b6020808252601190820152702232b0b23634b732903737ba1037bb32b960791b604082015260600190565b60208082526018908201527714d95b99195c881a185cc8185b1c9958591e481d9bdd195960421b604082015260600190565b6020808252601a908201527f6e656564734c6f676765722073686f756c642062652074727565000000000000604082015260600190565b60208082526016908201527553656e646572206d757374206265206120706172747960501b604082015260600190565b60208082526027908201527f64697265637456616c75652068617320746f206265206174206c65617374206f6040820152661b99481ddbdc9960ca1b606082015260800190565b6020808252602c908201527f4f7574707574206c656e67746820646f65736e2774206d61746368206f75747060408201526b7574206c6f67322073697a6560a01b606082015260800190565b60208082526012908201527129b2b73232b910109e90383937bb34b232b960711b604082015260600190565b60208082526027908201527f4f6e6c7920636f6e6365726e65642075736572732063616e206368616c6c656e6040820152666744726976657360c81b606082015260800190565b6020808252601290820152711591c81cdd185d19481b9bdd08199a5b985b60721b604082015260600190565b6020808252601b908201527f7761697450726f76696465722073686f756c6420626520747275650000000000604082015260600190565b602080825260179082015276537461746520213d2057616974696e6752657665616c7360481b604082015260600190565b60208082526018908201527729b2b73232b91036bab9ba10313290309031b630b4b6b2b960411b604082015260600190565b6020808252818101527f437478206d61726b6564206173206e6f206368616c6c656e6765206472697665604082015260600190565b6020808252602c908201527f496e707574206279746573206c656e677468206578636565647320636c61696d60408201526b6564206c6f67322073697a6560a01b606082015260800190565b9182526001600160a01b0316602082015260400190565b918252602082015260400190565b6000838252604060208301528254615d80604084016001600160401b0383166152b6565b615d936060840160ff8360401c166152c3565b50610120806080840152615dae6101608401600186016151fe565b838103603f190160a0850152615dc781600287016151fe565b600386015460c08601526004860154909150615def60e086016001600160a01b038316615051565b615e03610100860160ff8360a01c166151cc565b615e1583860160ff8360a81c166151cc565b615e29610140860160ff8360b01c166151cc565b5095945050505050565b948552602085019390935260408401919091526060830152608082015260a00190565b60006001600160401b038616825260ff851660208301528360408301526080606083015261547760808301846150a1565b60ff91909116815260200190565b6040518181016001600160401b0381118282101715615eb057fe5b604052919050565b60006001600160401b03821115615ecb57fe5b5060209081020190565b60009081526020902090565b60005b83811015615efc578181015183820152602001615ee4565b838111156135d95750506000910152565b8015158114614a4c57600080fdfe395534a9488250c4ea32136ac7cd156150898b4530ec3a5985e3ce6a50d2b36f496e646578206e6f7420696e7374616e74696174656400000000000000000000a264697066735822122081c872c24890ed2e34417baa41d230baade7ce34adc56afaf3b58d8e6a76acff64736f6c63430007040033",
  "libraries": {
    "Merkle": "0xD47860593fe40b3D0E04460e54bFE0b84E1E6922"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "abortByDeadline(uint256)": {
        "params": {
          "_index": "index of Cartesi Compute instance to abort"
        }
      },
      "challenge(uint256)": {
        "params": {
          "_index": "index of Cartesi Compute instance which challenger is starting the VG."
        }
      },
      "challengeDrives(uint256)": {
        "params": {
          "_index": "index of Cartesi Compute instance which is requested for the drives"
        }
      },
      "confirm(uint256)": {
        "params": {
          "_index": "index of Cartesi Compute instance which claimer being confirmed"
        }
      },
      "destruct(uint256)": {
        "params": {
          "_index": "index of Cartesi Compute instance to deactivate"
        }
      },
      "getResult(uint256)": {
        "params": {
          "_index": "index of Cartesi Compute instance to get result"
        },
        "returns": {
          "_0": "bool, indicates the result is ready",
          "_1": "bool, indicates the sdk is still running",
          "_2": "address, the user to blame for the abnormal stop of the sdk",
          "_3": "bytes, the result of the sdk if available"
        }
      },
      "instantiate(uint256,bytes32,uint64,uint8,uint256,address[],(uint64,uint8,bytes,bytes,bytes32,address,bool,bool,bool)[],bool)": {
        "params": {
          "_finalTime": "max cycle of the machine for that computation",
          "_inputDrives": "an array of drive which assemble the machine",
          "_noChallengeDrive": "bool indicating if content is challengeable",
          "_outputPosition": "position of the output drive",
          "_roundDuration": "duration of the round (security param)",
          "_templateHash": "hash of the machine with all drives empty"
        },
        "returns": {
          "_0": "uint256, Cartesi Compute index"
        }
      },
      "provideDirectDrive(uint256,bytes)": {
        "params": {
          "_index": "index of Cartesi Compute instance the drive belongs to.",
          "_value": "bytes value of the direct drive"
        }
      },
      "provideLoggerDrive(uint256,bytes32)": {
        "params": {
          "_index": "index of CartesiCompute instance the drive belongs to",
          "_root": "root hash of the logger drive"
        }
      },
      "revealLoggerDrive(uint256)": {
        "params": {
          "_index": "index of Cartesi Compute instance the drive belongs to"
        }
      },
      "submitClaim(uint256,bytes32,bytes32[][],bytes,bytes32[])": {
        "details": "Example: consider 3 drives, the first drive's siblings should be a pristine machine.      The second drive's siblings should be the machine with drive 1 mounted.      The third drive's siblings should be the machine with drive 2 mounted.",
        "params": {
          "_claimedFinalHash": "is the final hash of the machine",
          "_drivesSiblings": "is an array of siblings of each drive (see below example)",
          "_output": "is the bytes32 value of the output position",
          "_outputSiblings": "is the siblings of the output drive"
        }
      },
      "winByVG(uint256)": {
        "params": {
          "_index": "index of Cartesi Compute instance to win"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "abortByDeadline(uint256)": {
        "notice": "Abort the instance by missing deadline."
      },
      "challenge(uint256)": {
        "notice": "Challenger disputes the claim, starting a verification game."
      },
      "challengeDrives(uint256)": {
        "notice": "User requesting content of all drives to be revealed."
      },
      "confirm(uint256)": {
        "notice": "Party confirms the claim"
      },
      "destruct(uint256)": {
        "notice": "Deactivate a Cartesi Compute SDK instance."
      },
      "getResult(uint256)": {
        "notice": "Get result of a finished instance."
      },
      "getState(uint256,address)": {
        "notice": "Get state of the instance concerning given user."
      },
      "getSubInstances(uint256,address)": {
        "notice": "Get sub-instances of the instance."
      },
      "instantiate(uint256,bytes32,uint64,uint8,uint256,address[],(uint64,uint8,bytes,bytes,bytes32,address,bool,bool,bool)[],bool)": {
        "notice": "Instantiate a Cartesi Compute SDK instance."
      },
      "isConcerned(uint256,address)": {
        "notice": "Is the given user concern about this instance."
      },
      "provideDirectDrive(uint256,bytes)": {
        "notice": "Provide the content of a direct drive (only drive provider can call it)."
      },
      "provideLoggerDrive(uint256,bytes32)": {
        "notice": "Provide the root hash of a logger drive (only drive provider can call it)."
      },
      "revealLoggerDrive(uint256)": {
        "notice": "Reveal the content of a logger drive (only drive provider can call it)."
      },
      "submitClaim(uint256,bytes32,bytes32[][],bytes,bytes32[])": {
        "notice": "Claimer claims the machine final hash and also validate the drives and initial hash of the machine."
      },
      "winByVG(uint256)": {
        "notice": "In case one of the parties wins the verification game,         then he or she can call this function to claim victory in         this contract as well."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 468,
        "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
        "label": "currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 472,
        "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
        "label": "active",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 476,
        "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
        "label": "nonce",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1188,
        "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
        "label": "machine",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1190,
        "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
        "label": "li",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(LoggerInterface)378"
      },
      {
        "astId": 1192,
        "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
        "label": "vg",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(VGInterface)356"
      },
      {
        "astId": 1255,
        "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
        "label": "instance",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(CartesiComputeCtx)1251_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Drive)4379_storage)dyn_storage": {
        "base": "t_struct(Drive)4379_storage",
        "encoding": "dynamic_array",
        "label": "struct CartesiComputeInterface.Drive[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(LoggerInterface)378": {
        "encoding": "inplace",
        "label": "contract LoggerInterface",
        "numberOfBytes": "20"
      },
      "t_contract(VGInterface)356": {
        "encoding": "inplace",
        "label": "contract VGInterface",
        "numberOfBytes": "20"
      },
      "t_enum(State)4360": {
        "encoding": "inplace",
        "label": "enum CartesiComputeInterface.State",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Party)4388_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CartesiComputeInterface.Party)",
        "numberOfBytes": "32",
        "value": "t_struct(Party)4388_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(CartesiComputeCtx)1251_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CartesiCompute.CartesiComputeCtx)",
        "numberOfBytes": "32",
        "value": "t_struct(CartesiComputeCtx)1251_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(CartesiComputeCtx)1251_storage": {
        "encoding": "inplace",
        "label": "struct CartesiCompute.CartesiComputeCtx",
        "members": [
          {
            "astId": 1194,
            "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1196,
            "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
            "label": "revealDrivesPointer",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1198,
            "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
            "label": "providerDrivesPointer",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1200,
            "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
            "label": "finalTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1202,
            "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
            "label": "outputPosition",
            "offset": 0,
            "slot": "4",
            "type": "t_uint64"
          },
          {
            "astId": 1204,
            "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
            "label": "outputLog2Size",
            "offset": 8,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 1206,
            "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
            "label": "roundDuration",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1208,
            "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
            "label": "timeOfLastMove",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1210,
            "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
            "label": "vgInstance",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 1212,
            "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
            "label": "templateHash",
            "offset": 0,
            "slot": "8",
            "type": "t_bytes32"
          },
          {
            "astId": 1214,
            "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
            "label": "initialHash",
            "offset": 0,
            "slot": "9",
            "type": "t_bytes32"
          },
          {
            "astId": 1216,
            "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
            "label": "claimedFinalHash",
            "offset": 0,
            "slot": "10",
            "type": "t_bytes32"
          },
          {
            "astId": 1218,
            "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
            "label": "claimedOutput",
            "offset": 0,
            "slot": "11",
            "type": "t_bytes_storage"
          },
          {
            "astId": 1221,
            "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
            "label": "partiesArray",
            "offset": 0,
            "slot": "12",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 1224,
            "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
            "label": "confirmedParties",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 1226,
            "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
            "label": "claimer",
            "offset": 0,
            "slot": "14",
            "type": "t_uint64"
          },
          {
            "astId": 1228,
            "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
            "label": "currentChallenger",
            "offset": 8,
            "slot": "14",
            "type": "t_uint64"
          },
          {
            "astId": 1230,
            "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
            "label": "votesCounter",
            "offset": 16,
            "slot": "14",
            "type": "t_uint64"
          },
          {
            "astId": 1234,
            "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
            "label": "parties",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_address,t_struct(Party)4388_storage)"
          },
          {
            "astId": 1236,
            "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
            "label": "currentState",
            "offset": 0,
            "slot": "16",
            "type": "t_enum(State)4360"
          },
          {
            "astId": 1239,
            "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
            "label": "revealDrives",
            "offset": 0,
            "slot": "17",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 1242,
            "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
            "label": "providerDrives",
            "offset": 0,
            "slot": "18",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 1245,
            "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
            "label": "driveHash",
            "offset": 0,
            "slot": "19",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1248,
            "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
            "label": "inputDrives",
            "offset": 0,
            "slot": "20",
            "type": "t_array(t_struct(Drive)4379_storage)dyn_storage"
          },
          {
            "astId": 1250,
            "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
            "label": "noChallengeDrive",
            "offset": 0,
            "slot": "21",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "704"
      },
      "t_struct(Drive)4379_storage": {
        "encoding": "inplace",
        "label": "struct CartesiComputeInterface.Drive",
        "members": [
          {
            "astId": 4362,
            "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
            "label": "position",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 4364,
            "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
            "label": "driveLog2Size",
            "offset": 8,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 4366,
            "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
            "label": "directValue",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          },
          {
            "astId": 4368,
            "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
            "label": "loggerIpfsPath",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          },
          {
            "astId": 4370,
            "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
            "label": "loggerRootHash",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 4372,
            "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
            "label": "provider",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 4374,
            "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
            "label": "waitsProvider",
            "offset": 20,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 4376,
            "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
            "label": "needsLogger",
            "offset": 21,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 4378,
            "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
            "label": "downloadAsCAR",
            "offset": 22,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Party)4388_storage": {
        "encoding": "inplace",
        "label": "struct CartesiComputeInterface.Party",
        "members": [
          {
            "astId": 4381,
            "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
            "label": "isParty",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 4383,
            "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
            "label": "hasVoted",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 4385,
            "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
            "label": "hasCheated",
            "offset": 2,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 4387,
            "contract": "cache/solpp-generated-contracts/CartesiCompute.sol:CartesiCompute",
            "label": "arrayIdx",
            "offset": 3,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}